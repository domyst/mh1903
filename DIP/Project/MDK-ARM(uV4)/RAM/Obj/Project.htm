<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\RAM\Obj\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\RAM\Obj\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Mar 05 21:46:08 2022
<BR><P>
<H3>Maximum Stack Usage =       5600 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; menu_select &rArr; select_menu_0 &rArr; QR_Test &rArr; SingleBuffDecodeDemo &rArr; DecodeStart &rArr; BarDecodeStart &rArr; MhbarImageScanner &rArr; DataMatrixScanner &rArr; DMDataProcess &rArr; DMPerspectiveTransForm &rArr; CalcPerspectiveTransFormationMatrix &rArr; MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3ab]">KFromFinderPattern</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ab]">KFromFinderPattern</a><BR>
 <LI><a href="#[3aa]">KFromFinderPattern2</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3aa]">KFromFinderPattern2</a><BR>
 <LI><a href="#[3bb]">rs_quartic_solve</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3bb]">rs_quartic_solve</a><BR>
 <LI><a href="#[22]">ADC0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[3e]">AWD_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[9]">BusFault_Handler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[17]">CRYPT0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[37]">CSI2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[3f]">DAC_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[38]">DCMI_IRQHandler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[f]">DMA0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[3]">EAN13AndUPCADecode</a> from decodeupcean.o(.text) referenced 2 times from oneddecodemain.o(.data)
 <LI><a href="#[4]">EAN13CheckDispose</a> from decodeupcean.o(.text) referenced 2 times from oneddecodemain.o(.data)
 <LI><a href="#[1]">EAN13DecodeReset</a> from decodeupcean.o(.text) referenced 2 times from oneddecodemain.o(.data)
 <LI><a href="#[1c]">EXTI0_IRQHandler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1d]">EXTI1_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1e]">EXTI2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[28]">EXTI3_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[33]">EXTI4_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[34]">EXTI5_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[39]">EXTI6_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[3a]">EXTI7_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[3d]">GPU_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[32]">I2C0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[26]">KEYBOARD_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[12]">LCD_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[27]">MSR_IRQHandler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[3c]">QR_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[31]">QSPI_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[13]">SCI0_IRQHandler</a> from mhscpu_emv_hard.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2b]">SCI1_IRQHandler</a> from mhscpu_emv_hard.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2c]">SCI2_IRQHandler</a> from mhscpu_emv_hard.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[3b]">SDIOM_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[20]">SENSOR_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[16]">SPI0_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[29]">SPI1_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2a]">SPI2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2d]">SPI3_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2e]">SPI4_IRQHandler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[23]">SSC_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2]">SearchEAN13StEd</a> from decodeupcean.o(.text) referenced 2 times from oneddecodemain.o(.data)
 <LI><a href="#[e]">SysTick_Handler</a> from systick.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[41]">SystemInit</a> from system_mhscpu.o(.text) referenced from startup_mhscpu.o(.text)
 <LI><a href="#[18]">TIM0_0_IRQHandler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[19]">TIM0_1_IRQHandler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1a]">TIM0_2_IRQHandler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[1b]">TIM0_3_IRQHandler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[24]">TIM0_4_IRQHandler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[25]">TIM0_5_IRQHandler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[35]">TIM0_6_IRQHandler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[36]">TIM0_7_IRQHandler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[21]">TRNG_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[14]">UART0_IRQHandler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[15]">UART1_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[2f]">UART2_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[30]">UART3_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[11]">USBDMA_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[10]">USB_IRQHandler</a> from startup_mhscpu.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from mhscpu_it.o(.text) referenced from startup_mhscpu.o(RESET)
 <LI><a href="#[42]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mhscpu.o(.text)
 <LI><a href="#[44]">fputc</a> from main.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[43]">fr_is_rect_contain_with_other</a> from leveldetectionrect.o(.text) referenced from leveldetectionrect.o(.text)
 <LI><a href="#[2cf]">fr_rect_coincide_process</a> from leveldetectionrect.o(.text) referenced from leveldetectionrect.o(.text)
 <LI><a href="#[40]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[42]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(.text)
</UL>
<P><STRONG><a name="[406]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[45]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3e8]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[407]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[408]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[409]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[40a]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[40b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[40c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[135]"></a>__asm___16_mhscpu_sysctrl_c_220ebcab__SYSCTRL_Sleep</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mhscpu_sysctrl.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_EnterSleep
</UL>

<P><STRONG><a name="[47]"></a>Select_EMV_VCC</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Select_EMV_VCC &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Configuration
</UL>

<P><STRONG><a name="[4a]"></a>Display_All_Normal_menu</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Display_All_Normal_menu &rArr; LCD_DisplayPicDMA_Partial &rArr; LCD_DMAInit &rArr; DMA_Init &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA_Partial
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[4d]"></a>Display_All_Click_menu</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Display_All_Click_menu &rArr; LCD_DisplayPicDMA_Partial &rArr; LCD_DMAInit &rArr; DMA_Init &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA_Partial
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_1
</UL>

<P><STRONG><a name="[4e]"></a>RTC_Test</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = RTC_Test &rArr; LCD_DisplayOneInt &rArr; LCD_DisplayOneChar &rArr; LCD_BlockWritePrep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertUnixTimeToDate
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRefRegister
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRefRegister
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOneInt
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayColor
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_7
</UL>

<P><STRONG><a name="[57]"></a>select_menu_7</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = select_menu_7 &rArr; RTC_Test &rArr; LCD_DisplayOneInt &rArr; LCD_DisplayOneChar &rArr; LCD_BlockWritePrep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_BIT_Write
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Test
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[5a]"></a>DAC_Test</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DAC_Test &rArr; mdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetData
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_6
</UL>

<P><STRONG><a name="[5d]"></a>select_menu_6</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = select_menu_6 &rArr; FND_BIT_Write &rArr; GPIO_Write &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_BIT_Write
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Test
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[5e]"></a>select_menu_5</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = select_menu_5 &rArr; LCD_DisplayBand &rArr; LCD_BlockWritePrep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScaleVer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScaleHor2
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScaleHor1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayGrayHor32
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayGrayHor16
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayBand
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_BIT_Write
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[65]"></a>select_menu_4</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = select_menu_4 &rArr; FND_HEX_Write &rArr; GPIO_Write &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_HEX_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_BIT_Write
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[67]"></a>select_menu_3</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = select_menu_3 &rArr; touch_get_position &rArr; touch_get_raw_position &rArr; touch_get_x &rArr; SPI_GPIO_TX &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_position
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOneDot
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayColor
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_BIT_Write
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[6a]"></a>MSR_test</STRONG> (Thumb, 560 bytes, Stack size 688 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = MSR_test &rArr; get_decode_data &rArr; get_card_data &rArr; get_dpu_track_raw_data &rArr; msr_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wakeup_status
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_sleep
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dpu
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_track_raw_data
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decode_data
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_swiping_card
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOneInt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOneChar
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayColor
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_2
</UL>

<P><STRONG><a name="[74]"></a>select_menu_2</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = select_menu_2 &rArr; MSR_test &rArr; get_decode_data &rArr; get_card_data &rArr; get_dpu_track_raw_data &rArr; msr_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayColor
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_BIT_Write
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_test
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[75]"></a>select_menu_LoopBack</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2636<LI>Call Chain = select_menu_LoopBack &rArr; loop_back &rArr; iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayColor
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_BIT_Write
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_1
</UL>

<P><STRONG><a name="[77]"></a>GetCreditCardNumber</STRONG> (Thumb, 538 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5052<LI>Call Chain = GetCreditCardNumber &rArr; SCI_Test &rArr; ReadRecord &rArr; iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Test
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayColor
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_CreditNum
</UL>

<P><STRONG><a name="[7a]"></a>select_menu_CreditNum</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5060<LI>Call Chain = select_menu_CreditNum &rArr; GetCreditCardNumber &rArr; SCI_Test &rArr; ReadRecord &rArr; iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayColor
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_BIT_Write
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCreditCardNumber
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_1
</UL>

<P><STRONG><a name="[7d]"></a>menu_find</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = menu_find
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_1
</UL>

<P><STRONG><a name="[7b]"></a>select_menu_1</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5092<LI>Call Chain = select_menu_1 &rArr; select_menu_CreditNum &rArr; GetCreditCardNumber &rArr; SCI_Test &rArr; ReadRecord &rArr; iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_irq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_position
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA_Partial
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_find
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_CreditNum
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_LoopBack
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_All_Click_menu
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[7e]"></a>QR_Test</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5560<LI>Call Chain = QR_Test &rArr; SingleBuffDecodeDemo &rArr; DecodeStart &rArr; BarDecodeStart &rArr; MhbarImageScanner &rArr; DataMatrixScanner &rArr; DMDataProcess &rArr; DMPerspectiveTransForm &rArr; CalcPerspectiveTransFormationMatrix &rArr; MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBuffDecodeDemo
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDecodeLibVerison
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_0
</UL>

<P><STRONG><a name="[81]"></a>LED_IOConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LED_IOConfig &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_0
</UL>

<P><STRONG><a name="[83]"></a>select_menu_0</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5568<LI>Call Chain = select_menu_0 &rArr; QR_Test &rArr; SingleBuffDecodeDemo &rArr; DecodeStart &rArr; BarDecodeStart &rArr; MhbarImageScanner &rArr; DataMatrixScanner &rArr; DMDataProcess &rArr; DMPerspectiveTransForm &rArr; CalcPerspectiveTransFormationMatrix &rArr; MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_BIT_Write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_IOConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Test
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
</UL>

<P><STRONG><a name="[84]"></a>menu_select</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5576<LI>Call Chain = menu_select &rArr; select_menu_0 &rArr; QR_Test &rArr; SingleBuffDecodeDemo &rArr; DecodeStart &rArr; BarDecodeStart &rArr; MhbarImageScanner &rArr; DataMatrixScanner &rArr; DMDataProcess &rArr; DMPerspectiveTransForm &rArr; CalcPerspectiveTransFormationMatrix &rArr; MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_0
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_1
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_3
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_4
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_5
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_6
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_7
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[af]"></a>RTC_Configuration</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[85]"></a>DAC_Configuration</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DAC_Configuration &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[8b]"></a>SCI_NVICConfig</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SCI_NVICConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Configuration
</UL>

<P><STRONG><a name="[8e]"></a>SCI_IOConfig</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SCI_IOConfig &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Configuration
</UL>

<P><STRONG><a name="[8f]"></a>SCI_Configuration</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCI_Configuration &rArr; Select_EMV_VCC &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_ConfigEMV
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_IOConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_NVICConfig
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_EMV_VCC
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[91]"></a>DCMI_NVICConfig</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DCMI_NVICConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ITConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ClearITPendingBit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Configuration
</UL>

<P><STRONG><a name="[94]"></a>DCMI_IOConfig</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DCMI_IOConfig &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Configuration
</UL>

<P><STRONG><a name="[95]"></a>Cameraclk_Configuration</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Cameraclk_Configuration &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMInit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Configuration
</UL>

<P><STRONG><a name="[99]"></a>CameraI2CGPIOConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CameraI2CGPIOConfig &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Configuration
</UL>

<P><STRONG><a name="[9b]"></a>QR_Configuration</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = QR_Configuration &rArr; DecodeInit &rArr; DCMI_Configuration &rArr; DCMIDMAConfig &rArr; DCMIInitialize &rArr; DCMIDMAInitialize &rArr; DMA_MultiBlockInit &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphResetCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphClockCmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraI2CGPIOConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cameraclk_Configuration
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IOConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_NVICConfig
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[9f]"></a>KEY_NVICConfig</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = KEY_NVICConfig &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_LineConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Configuration
</UL>

<P><STRONG><a name="[a1]"></a>KEY_IOConfig</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = KEY_IOConfig &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Configuration
</UL>

<P><STRONG><a name="[a2]"></a>KEY_Configuration</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = KEY_Configuration &rArr; KEY_IOConfig &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_IOConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_NVICConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[a3]"></a>UART_Configuration</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_Configuration &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[a5]"></a>main_org</STRONG> (Thumb, 546 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_irq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_position
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateTouchScreen
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Configuration
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SYSCLKSourceSelect
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLDivConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HCLKConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA_Partial
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayColor
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_HEX_Write
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_Configuration
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_BIT_Write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Configuration
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Configuration
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Configuration
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Configuration
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_find
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_All_Normal_menu
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[b2]"></a>TIMER_Configuration</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_Configuration &rArr; TIM_Init &rArr; TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>NVIC_Configuration</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40d]"></a>TIMM0_GetTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>TIMM0_Mdelay</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>

<P><STRONG><a name="[40]"></a>main</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5600<LI>Call Chain = main &rArr; menu_select &rArr; select_menu_0 &rArr; QR_Test &rArr; SingleBuffDecodeDemo &rArr; DecodeStart &rArr; BarDecodeStart &rArr; MhbarImageScanner &rArr; DataMatrixScanner &rArr; DMDataProcess &rArr; DMPerspectiveTransForm &rArr; CalcPerspectiveTransFormationMatrix &rArr; MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_irq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_position
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateTouchScreen
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Configuration
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SYSCLKSourceSelect
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLDivConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HCLKConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA_Partial
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayColor
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Configuration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_HEX_Write
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_Configuration
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_BIT_Write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Configuration
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Configuration
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Configuration
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Configuration
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Configuration
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_find
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_All_Normal_menu
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b7]"></a>Sign_test</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_position
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOneDot
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayColor
</UL>

<P><STRONG><a name="[b8]"></a>UART_Configuration_all</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>

<P><STRONG><a name="[b9]"></a>SER_PutChar</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SER_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsTXEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[44]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; SER_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[119]"></a>assert_failed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_GetITStatus
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_SYSCLKSourceSelect
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLDivConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PLLConfig
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HCLKConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphResetCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphClockCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_LineConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ITConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_GetFlagStatus
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_ClearITPendingBit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_GetITStatus
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_ITConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_DMACmd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMSinglePulseConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ModeConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveGeneralNACKOnlyCmd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveBytes
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendBytes
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGenerateReceiveSCL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ExtendData
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearITPendingBit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetRawITStatus
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetITStatus
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetSDAHoldTime
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetSDASetupTime
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMACmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetTargetAddress
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IrDACmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NSM_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearITPendingBit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetITStatus
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BiDirectionalLineConfig
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataSizeConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ITConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMACmd
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_PCLKConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_EnterSleep
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WakeModeConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WakeEvenConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullUpCmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ClearFlag
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_GetFlagStatus
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Cmd
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_JPEGCmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CROPCmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_SetDMARequsetFIFOSize
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_ImageBinaryInit
</UL>

<P><STRONG><a name="[aa]"></a>SYSTICK_Init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYSTICK_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systick.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>get_tick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
</UL>

<P><STRONG><a name="[be]"></a>get_diff_tick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
</UL>

<P><STRONG><a name="[bc]"></a>udelay</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udelay
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_diff_tick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Read_GPIO
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitSequence
</UL>

<P><STRONG><a name="[56]"></a>mdelay</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_diff_tick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_Blink
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_RDDIDIF
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_4
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_5
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Test
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Test
</UL>

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mhscpu_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mhscpu_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mhscpu_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mhscpu_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mhscpu_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART0_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mhscpu_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITIdentity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DCMI_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, mhscpu_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DCMI_IRQHandler &rArr; DCMI_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_GetITStatus
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CallBackFrame
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mhscpu_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EXTI0_IRQHandler &rArr; GPIO_ResetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>MSR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mhscpu_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mhscpu_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM0_0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mhscpu_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM0_0_IRQHandler &rArr; TIM_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM0_1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mhscpu_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM0_1_IRQHandler &rArr; TIM_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM0_2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mhscpu_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM0_2_IRQHandler &rArr; TIM_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM0_3_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mhscpu_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM0_3_IRQHandler &rArr; TIM_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM0_4_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mhscpu_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM0_4_IRQHandler &rArr; TIM_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM0_5_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mhscpu_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM0_5_IRQHandler &rArr; TIM_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM0_6_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mhscpu_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM0_6_IRQHandler &rArr; TIM_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM0_7_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mhscpu_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM0_7_IRQHandler &rArr; TIM_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>TOUCH_IO_Configuration</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, xpt2046.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TOUCH_IO_Configuration &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Configuration
</UL>

<P><STRONG><a name="[c9]"></a>SPI_Configuration</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, xpt2046.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_Configuration &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Configuration
</UL>

<P><STRONG><a name="[ab]"></a>TOUCH_Configuration</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, xpt2046.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TOUCH_Configuration &rArr; SPI_Configuration &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_IO_Configuration
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[7c]"></a>touch_irq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, xpt2046.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touch_irq &rArr; GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_temp
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_x
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_y
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateTouchScreen
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_1
</UL>

<P><STRONG><a name="[cc]"></a>touch_busy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, xpt2046.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touch_busy &rArr; GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_x
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_y
</UL>

<P><STRONG><a name="[cd]"></a>SPI_GPIO_RX</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xpt2046.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_GPIO_RX &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_temp
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_x
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_y
</UL>

<P><STRONG><a name="[ce]"></a>SPI_GPIO_TX</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, xpt2046.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_GPIO_TX &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_temp
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_x
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_y
</UL>

<P><STRONG><a name="[cf]"></a>touch_get_y</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, xpt2046.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touch_get_y &rArr; SPI_GPIO_TX &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_TX
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_RX
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_busy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_irq
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_raw_position
</UL>

<P><STRONG><a name="[d0]"></a>touch_get_x</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, xpt2046.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = touch_get_x &rArr; SPI_GPIO_TX &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_TX
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_RX
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_busy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_irq
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_raw_position
</UL>

<P><STRONG><a name="[d1]"></a>touch_get_raw_position</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, xpt2046.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = touch_get_raw_position &rArr; touch_get_x &rArr; SPI_GPIO_TX &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_x
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_y
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_position
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateTouchScreen
</UL>

<P><STRONG><a name="[d2]"></a>touch_temp</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, xpt2046.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_TX
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_RX
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_irq
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[d3]"></a>SPI_GPIO_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, xpt2046.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>

<P><STRONG><a name="[d4]"></a>LCD_WriteEx</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_WriteEx &rArr; LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitSequence_PSK
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_RDDIDIF
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitSequence
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayGrayHor32
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayGrayHor16
</UL>

<P><STRONG><a name="[d6]"></a>LCD_InitSequence</STRONG> (Thumb, 714 bytes, Stack size 8 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_InitSequence &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteEx
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Configuration
</UL>

<P><STRONG><a name="[d7]"></a>LCD_Reset</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_Reset &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Configuration
</UL>

<P><STRONG><a name="[d8]"></a>LCD_IOConfig</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_IOConfig &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Configuration
</UL>

<P><STRONG><a name="[ac]"></a>LCD_Configuration</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_Configuration &rArr; LCD_IOConfig &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IOConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitSequence
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphResetCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[da]"></a>LCD_DMAInit</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LCD_DMAInit &rArr; DMA_Init &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA_Partial
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA
</UL>

<P><STRONG><a name="[dc]"></a>LCD_DMAWriteEnable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_DMAWriteEnable &rArr; DMA_GetRawStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetRawStatus
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA_Partial
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA
</UL>

<P><STRONG><a name="[e1]"></a>LCD_Write_GPIO</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ili9488.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputData
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[e4]"></a>LCD_Read_GPIO</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ili9488.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[e6]"></a>LCD_ReadEx</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ili9488.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_RDDIDIF
</UL>

<P><STRONG><a name="[e8]"></a>LCD_WriteOneDot</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_WriteOneDot &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOneDot
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOneChar
</UL>

<P><STRONG><a name="[e9]"></a>LCD_BlockWritePrep</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_BlockWritePrep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteEx
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStr90
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDirect_Partial
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDirect
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayFrame
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScaleVer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScaleHor2
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScaleHor1
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA_Partial
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOneDot
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOneChar
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayGrayHor32
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayGrayHor16
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayColor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayBand
</UL>

<P><STRONG><a name="[70]"></a>LCD_DisplayOneChar</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LCD_DisplayOneChar &rArr; LCD_BlockWritePrep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteOneDot
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStr90
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_RDDIDIF
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOneInt
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_test
</UL>

<P><STRONG><a name="[55]"></a>LCD_DisplayStr</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LCD_DisplayStr &rArr; LCD_DisplayOneChar &rArr; LCD_BlockWritePrep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_toOrd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOneChar
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_RDDIDIF
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBuffDecodeDemo
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_CreditNum
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCreditCardNumber
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_LoopBack
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_2
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_test
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Test
</UL>

<P><STRONG><a name="[eb]"></a>LCD_RD_RDDIDIF</STRONG> (Thumb, 572 bytes, Stack size 16 bytes, ili9488.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadEx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteEx
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOneChar
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[ec]"></a>LCD_InitSequence_PSK</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ili9488.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteEx
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[50]"></a>LCD_DisplayColor</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_DisplayColor &rArr; LCD_BlockWritePrep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateTouchScreen
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sign_test
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_CreditNum
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCreditCardNumber
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_LoopBack
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_2
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_test
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_3
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Test
</UL>

<P><STRONG><a name="[5f]"></a>LCD_DisplayGrayHor16</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_DisplayGrayHor16 &rArr; LCD_BlockWritePrep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteEx
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_5
</UL>

<P><STRONG><a name="[60]"></a>LCD_DisplayGrayHor32</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_DisplayGrayHor32 &rArr; LCD_BlockWritePrep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteEx
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_5
</UL>

<P><STRONG><a name="[61]"></a>LCD_DisplayBand</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_DisplayBand &rArr; LCD_BlockWritePrep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_5
</UL>

<P><STRONG><a name="[ed]"></a>LCD_DisplayFrame</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, ili9488.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[62]"></a>LCD_DisplayScaleHor1</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_DisplayScaleHor1 &rArr; LCD_BlockWritePrep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_5
</UL>

<P><STRONG><a name="[63]"></a>LCD_DisplayScaleHor2</STRONG> (Thumb, 536 bytes, Stack size 16 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_DisplayScaleHor2 &rArr; LCD_BlockWritePrep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_5
</UL>

<P><STRONG><a name="[64]"></a>LCD_DisplayScaleVer</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_DisplayScaleVer &rArr; LCD_BlockWritePrep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_5
</UL>

<P><STRONG><a name="[ee]"></a>LCD_DisplayPicDirect</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ili9488.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[ef]"></a>LCD_DisplayPicDirect_Partial</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, ili9488.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>

<P><STRONG><a name="[b0]"></a>LCD_DisplayPicDMA</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LCD_DisplayPicDMA &rArr; LCD_DMAInit &rArr; DMA_Init &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FIFODMAconfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DMAWriteEnable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DMAInit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBuffDecodeDemo
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[4c]"></a>LCD_DisplayPicDMA_Partial</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LCD_DisplayPicDMA_Partial &rArr; LCD_DMAInit &rArr; DMA_Init &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FIFODMAconfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DMAWriteEnable
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DMAInit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_1
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_All_Click_menu
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_All_Normal_menu
</UL>

<P><STRONG><a name="[69]"></a>LCD_DisplayOneDot</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_DisplayOneDot &rArr; LCD_BlockWritePrep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteOneDot
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sign_test
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_3
</UL>

<P><STRONG><a name="[54]"></a>LCD_DisplayOneInt</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LCD_DisplayOneInt &rArr; LCD_DisplayOneChar &rArr; LCD_BlockWritePrep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOneChar
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_test
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Test
</UL>

<P><STRONG><a name="[f1]"></a>LCD_DisplayStr90</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ili9488.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_toOrd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOneChar
</UL>

<P><STRONG><a name="[f2]"></a>LCD_DrawLine</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ili9488.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LCD_DrawLine &rArr; LCD_BlockWritePrep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteOneDot
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawGird
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateTouchScreen
</UL>

<P><STRONG><a name="[f3]"></a>LCD_DrawGird</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ili9488.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[40e]"></a>HexToAscii</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ili9488.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>Delay_Ms</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, beep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
</UL>

<P><STRONG><a name="[f4]"></a>BEEP_Init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BEEP_Init &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Configuration
</UL>

<P><STRONG><a name="[ad]"></a>BEEP_Configuration</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BEEP_Configuration &rArr; BEEP_Init &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[73]"></a>beep</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = beep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleBuffDecodeDemo
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBuffDecodeDemo
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_1
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_test
</UL>

<P><STRONG><a name="[b1]"></a>calibrateTouchScreen</STRONG> (Thumb, 486 bytes, Stack size 64 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = calibrateTouchScreen &rArr; LCD_DrawLine &rArr; LCD_BlockWritePrep &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_raw_position
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_irq
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayColor
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[68]"></a>touch_get_position</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = touch_get_position &rArr; touch_get_raw_position &rArr; touch_get_x &rArr; SPI_GPIO_TX &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_raw_position
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sign_test
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_1
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_3
</UL>

<P><STRONG><a name="[f9]"></a>FND_IOConfig</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FND_IOConfig &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_Configuration
</UL>

<P><STRONG><a name="[ae]"></a>FND_Configuration</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FND_Configuration &rArr; FND_IOConfig &rArr; GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_IOConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[66]"></a>FND_HEX_Write</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, fnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FND_HEX_Write &rArr; GPIO_Write &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputData
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_Blink
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_4
</UL>

<P><STRONG><a name="[59]"></a>FND_BIT_Write</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FND_BIT_Write &rArr; GPIO_Write &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputData
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_Blink
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_0
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_CreditNum
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_LoopBack
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_3
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_4
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_5
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_6
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_7
</UL>

<P><STRONG><a name="[fa]"></a>FND_Blink</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fnd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_HEX_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_BIT_Write
</UL>

<P><STRONG><a name="[80]"></a>SingleBuffDecodeDemo</STRONG> (Thumb, 380 bytes, Stack size 2224 bytes, decodedemo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5544<LI>Call Chain = SingleBuffDecodeDemo &rArr; DecodeStart &rArr; BarDecodeStart &rArr; MhbarImageScanner &rArr; DataMatrixScanner &rArr; DMDataProcess &rArr; DMPerspectiveTransForm &rArr; CalcPerspectiveTransFormationMatrix &rArr; MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetImageBuffAddr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeStart
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeDcmiStart
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeDcmiFinish
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeConfigInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanDecodeBuffFlag
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStr
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Test
</UL>

<P><STRONG><a name="[103]"></a>DoubleBuffDecodeDemo</STRONG> (Thumb, 182 bytes, Stack size 2176 bytes, decodedemo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDecodeBuffFlag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeStart
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeDcmiStart
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeDcmiFinish
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeConfigInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanDecodeBuffFlag
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[105]"></a>print_hex</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, test_emv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[106]"></a>timer0_1_stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, test_emv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[108]"></a>Timer0_0_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, test_emv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>

<P><STRONG><a name="[10b]"></a>timer0_1_IsTimeout</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, test_emv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ChangeNs
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Ms
</UL>

<P><STRONG><a name="[109]"></a>timer0_1_start</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, test_emv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer0_1_start
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ChangeNs
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Ms
</UL>

<P><STRONG><a name="[10a]"></a>delay_Ms</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, test_emv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = delay_Ms &rArr; timer0_1_start
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_1_start
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_1_IsTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_Ns
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
</UL>

<P><STRONG><a name="[10c]"></a>wait_Ns</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, test_emv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Ms
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[10d]"></a>wait_ChangeNs</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, test_emv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wait_ChangeNs &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_1_start
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_1_IsTimeout
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
</UL>

<P><STRONG><a name="[76]"></a>loop_back</STRONG> (Thumb, 552 bytes, Stack size 1152 bytes, test_loopback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2628<LI>Call Chain = loop_back &rArr; iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_device_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_detect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_close
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ChangeNs
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_Ms
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOneInt
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_LoopBack
</UL>

<P><STRONG><a name="[113]"></a>computeDayOfWeek</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = computeDayOfWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertUnixTimeToDate
</UL>

<P><STRONG><a name="[53]"></a>convertUnixTimeToDate</STRONG> (Thumb, 216 bytes, Stack size 36 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = convertUnixTimeToDate &rArr; computeDayOfWeek
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeDayOfWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Test
</UL>

<P><STRONG><a name="[40f]"></a>convertDateToUnixTime</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>Uart0_SendDatas</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsTXEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_Initial
</UL>

<P><STRONG><a name="[115]"></a>Uart0_Initial</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_SendDatas
</UL>

<P><STRONG><a name="[116]"></a>init_uart</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[c1]"></a>push</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[410]"></a>pop</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[411]"></a>isEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>AWD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>CRYPT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CSI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>GPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>KEYBOARD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>QR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIOM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SENSOR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>USBDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[8d]"></a>NVIC_Init</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_NVICConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_NVICConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_NVICConfig
</UL>

<P><STRONG><a name="[11a]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[11b]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[11c]"></a>DCMI_DeInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mhscpu_dcmi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseHardDecode
</UL>

<P><STRONG><a name="[11d]"></a>DCMI_Init</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, mhscpu_dcmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCMI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMIInitialize
</UL>

<P><STRONG><a name="[11e]"></a>DCMI_SetDMARequsetFIFOSize</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mhscpu_dcmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCMI_SetDMARequsetFIFOSize
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMIDMAInitialize
</UL>

<P><STRONG><a name="[412]"></a>DCMI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mhscpu_dcmi.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>DCMI_CROPConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mhscpu_dcmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMIInitialize
</UL>

<P><STRONG><a name="[11f]"></a>DCMI_CROPCmd</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mhscpu_dcmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCMI_CROPCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMIInitialize
</UL>

<P><STRONG><a name="[120]"></a>DCMI_JPEGCmd</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mhscpu_dcmi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[121]"></a>DCMI_Cmd</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mhscpu_dcmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCMI_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMIInitialize
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseHardDecode
</UL>

<P><STRONG><a name="[122]"></a>DCMI_CaptureCmd</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mhscpu_dcmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCMI_CaptureCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeDcmiStart
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMIInitialize
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseHardDecode
</UL>

<P><STRONG><a name="[413]"></a>DCMI_ReadData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_dcmi.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>DCMI_GetFIFODataWordNum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mhscpu_dcmi.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>DCMI_ITConfig</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mhscpu_dcmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCMI_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_NVICConfig
</UL>

<P><STRONG><a name="[123]"></a>DCMI_GetFlagStatus</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mhscpu_dcmi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[124]"></a>DCMI_ClearFlag</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mhscpu_dcmi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[c2]"></a>DCMI_GetITStatus</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, mhscpu_dcmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCMI_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>DCMI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_dcmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_NVICConfig
</UL>

<P><STRONG><a name="[1d9]"></a>DCMI_SetExtInput</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mhscpu_dcmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMIInitialize
</UL>

<P><STRONG><a name="[125]"></a>DMA_IsChannelEnabled</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mhscpu_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelxBit
</UL>

<P><STRONG><a name="[de]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mhscpu_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DMAWriteEnable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MultiBlockInit
</UL>

<P><STRONG><a name="[128]"></a>DMA_ChannelConfig</STRONG> (Thumb, 536 bytes, Stack size 12 bytes, mhscpu_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_ChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MultiBlockInit
</UL>

<P><STRONG><a name="[df]"></a>DMA_ChannelCmd</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mhscpu_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelxBit
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DMAWriteEnable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MultiBlockInit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLIDmaInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseHardDecode
</UL>

<P><STRONG><a name="[db]"></a>DMA_Init</STRONG> (Thumb, 596 bytes, Stack size 64 bytes, mhscpu_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA_Init &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelxBit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetPeripheralConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DMAInit
</UL>

<P><STRONG><a name="[129]"></a>DMA_SetSrcSingleReq</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mhscpu_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelxBit
</UL>

<P><STRONG><a name="[12a]"></a>DMA_SetSrcBlockReq</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mhscpu_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelxBit
</UL>

<P><STRONG><a name="[415]"></a>DMA_SetSRCAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_dma.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>DMA_SetDSRAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLIDmaInit
</UL>

<P><STRONG><a name="[12b]"></a>DMA_ITConfig</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, mhscpu_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelxBit
</UL>

<P><STRONG><a name="[dd]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, mhscpu_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_ClearITPendingBit
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelxBit
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DMAWriteEnable
</UL>

<P><STRONG><a name="[12c]"></a>DMA_GetITStatus</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mhscpu_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelxBit
</UL>

<P><STRONG><a name="[e0]"></a>DMA_GetRawStatus</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mhscpu_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_GetRawStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelxBit
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DMAWriteEnable
</UL>

<P><STRONG><a name="[12d]"></a>DMA_MultiBlockInit</STRONG> (Thumb, 1124 bytes, Stack size 72 bytes, mhscpu_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DMA_MultiBlockInit &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelxBit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetPeripheralConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMIDMAInitialize
</UL>

<P><STRONG><a name="[1dc]"></a>DMA_InitLLI</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, mhscpu_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_InitLLI
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLIDmaInit
</UL>

<P><STRONG><a name="[12f]"></a>GPIO_DeInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mhscpu_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
</UL>

<P><STRONG><a name="[88]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, mhscpu_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IOConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration_all
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraI2CGPIOConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cameraclk_Configuration
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IOConfig
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_IOConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Configuration
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_cold_reset
</UL>

<P><STRONG><a name="[48]"></a>GPIO_Init</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, mhscpu_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GPIO_Init &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_IOConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Read_GPIO
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_GPIO
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IOConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_IO_Configuration
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_IOConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_IOConfig
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_EMV_VCC
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitialize
</UL>

<P><STRONG><a name="[416]"></a>GPIO_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mhscpu_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, mhscpu_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ReadInputDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_RX
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_busy
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_irq
</UL>

<P><STRONG><a name="[e5]"></a>GPIO_ReadInputData</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, mhscpu_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Read_GPIO
</UL>

<P><STRONG><a name="[130]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, mhscpu_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[e2]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mhscpu_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_GPIO
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_HEX_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_BIT_Write
</UL>

<P><STRONG><a name="[49]"></a>GPIO_SetBits</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, mhscpu_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDirect_Partial
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDirect
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayFrame
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitSequence_PSK
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_RDDIDIF
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteOneDot
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Read_GPIO
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_GPIO
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_IOConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitSequence
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_temp
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_x
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_y
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_TX
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_RX
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScaleVer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScaleHor2
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScaleHor1
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA_Partial
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayGrayHor32
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayGrayHor16
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayColor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayBand
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_0
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_EMV_VCC
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorStart
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDecode
</UL>

<P><STRONG><a name="[82]"></a>GPIO_ResetBits</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, mhscpu_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO_ResetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDirect_Partial
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDirect
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayFrame
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitSequence_PSK
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_RDDIDIF
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlockWritePrep
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteOneDot
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Read_GPIO
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_GPIO
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Reset
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_InitSequence
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_temp
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_x
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_get_y
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_TX
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_RX
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScaleVer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScaleHor2
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScaleHor1
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA_Partial
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayGrayHor32
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayGrayHor16
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayColor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayBand
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_IOConfig
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorStart
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDecode
</UL>

<P><STRONG><a name="[e3]"></a>GPIO_Write</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, mhscpu_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO_Write &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_GPIO
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_HEX_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FND_BIT_Write
</UL>

<P><STRONG><a name="[131]"></a>GPIO_PullUpCmd</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, mhscpu_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[417]"></a>GPIO_WakeEvenDeInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mhscpu_gpio.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>GPIO_WakeEvenConfig</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, mhscpu_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[133]"></a>GPIO_WakeModeConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mhscpu_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[9c]"></a>SYSCTRL_AHBPeriphClockCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mhscpu_sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_AHBPeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Configuration
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Configuration
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageAverageCalc
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary3
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMIDMAInitialize
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseHardDecode
</UL>

<P><STRONG><a name="[86]"></a>SYSCTRL_APBPeriphClockCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mhscpu_sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_APBPeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Configuration
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration_all
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Configuration
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraI2CGPIOConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cameraclk_Configuration
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Configuration
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMIInitialize
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitialize
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseHardDecode
</UL>

<P><STRONG><a name="[9d]"></a>SYSCTRL_AHBPeriphResetCmd</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mhscpu_sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_AHBPeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Configuration
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Configuration
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DeInit
</UL>

<P><STRONG><a name="[87]"></a>SYSCTRL_APBPeriphResetCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mhscpu_sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCTRL_APBPeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_Configuration
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration_all
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Configuration
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Configuration
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DeInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DeInit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMIInitialize
</UL>

<P><STRONG><a name="[134]"></a>SYSCTRL_EnterSleep</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mhscpu_sysctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___16_mhscpu_sysctrl_c_220ebcab__SYSCTRL_Sleep
</UL>

<P><STRONG><a name="[a6]"></a>SYSCTRL_SYSCLKSourceSelect</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_SYSCLKSourceSelect
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[a7]"></a>SYSCTRL_PLLConfig</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_PLLConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[a8]"></a>SYSCTRL_PLLDivConfig</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTRL_PLLDivConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[96]"></a>SYSCTRL_GetClocksFreq</STRONG> (Thumb, 370 bytes, Stack size 0 bytes, mhscpu_sysctrl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_HCLKConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cameraclk_Configuration
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageAverageCalc
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary3
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[a9]"></a>SYSCTRL_HCLKConfig</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, mhscpu_sysctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYSCTRL_HCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
</UL>

<P><STRONG><a name="[136]"></a>SYSCTRL_PCLKConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mhscpu_sysctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[137]"></a>SPI_DeInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, mhscpu_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
</UL>

<P><STRONG><a name="[ca]"></a>SPI_Init</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, mhscpu_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterSlaveModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[418]"></a>SPI_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mhscpu_spi.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>SPI_Cmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mhscpu_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Configuration
</UL>

<P><STRONG><a name="[139]"></a>SPI_DMAInit</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mhscpu_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[419]"></a>SPI_DMAStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_spi.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>SPI_DMACmd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mhscpu_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[13b]"></a>SPI_ITConfig</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mhscpu_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[41a]"></a>SPI_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_spi.o(.text), UNUSED)

<P><STRONG><a name="[41b]"></a>SPI_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mhscpu_spi.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mhscpu_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[13d]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, mhscpu_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[13e]"></a>SPI_GetITStatus</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mhscpu_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[13f]"></a>SPI_ClearITPendingBit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mhscpu_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[140]"></a>SPI_GetFlagStatus</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mhscpu_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[41c]"></a>SPI_GetFlagStatusReg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_spi.o(.text), UNUSED)

<P><STRONG><a name="[41d]"></a>SPI_IsBusy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_spi.o(.text), UNUSED)

<P><STRONG><a name="[41e]"></a>SPI_IsTXErr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_spi.o(.text), UNUSED)

<P><STRONG><a name="[41f]"></a>SPI_IsDataCollisionErr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_spi.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>SSP_Init</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, mhscpu_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterSlaveModeSet
</UL>

<P><STRONG><a name="[420]"></a>SSP_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mhscpu_spi.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>NSM_Init</STRONG> (Thumb, 566 bytes, Stack size 16 bytes, mhscpu_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterSlaveModeSet
</UL>

<P><STRONG><a name="[421]"></a>NSM_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mhscpu_spi.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>LCD_BusRead</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mhscpu_lcdi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Read
</UL>

<P><STRONG><a name="[147]"></a>LCD_BusWrite</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, mhscpu_lcdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
</UL>

<P><STRONG><a name="[f0]"></a>LCD_FIFODMAconfig</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, mhscpu_lcdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA_Partial
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDMA
</UL>

<P><STRONG><a name="[143]"></a>LCD_WriteBuff</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, mhscpu_lcdi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetInt
</UL>

<P><STRONG><a name="[146]"></a>LCD_ReadBuff</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, mhscpu_lcdi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetInt
</UL>

<P><STRONG><a name="[d9]"></a>LCD_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mhscpu_lcdi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Configuration
</UL>

<P><STRONG><a name="[d5]"></a>LCD_Write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mhscpu_lcdi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BusWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDirect_Partial
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayPicDirect
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayFrame
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteOneDot
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteEx
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScaleVer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScaleHor2
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayScaleHor1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayGrayHor32
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayGrayHor16
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayColor
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayBand
</UL>

<P><STRONG><a name="[e7]"></a>LCD_Read</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, mhscpu_lcdi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadEx
</UL>

<P><STRONG><a name="[149]"></a>UART_DeInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, mhscpu_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[a4]"></a>UART_Init</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, mhscpu_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration_all
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Configuration
</UL>

<P><STRONG><a name="[422]"></a>UART_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[423]"></a>UART_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>UART_SendData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_SendDatas
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
</UL>

<P><STRONG><a name="[c0]"></a>UART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mhscpu_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[424]"></a>UART_AutoFlowCtrlCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[425]"></a>UART_SetDTR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[426]"></a>UART_ResetDTR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[427]"></a>UART_SetRTS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[428]"></a>UART_ResetRTS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[429]"></a>UART_FIFOInit</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[42a]"></a>UART_FIFOStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[42b]"></a>UART_FIFOReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[42c]"></a>UART_FIFOCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[42d]"></a>UART_GetLineStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[42e]"></a>UART_GetModemStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>UART_GetITIdentity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[42f]"></a>UART_IsRXFIFOError</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[430]"></a>UART_IsRXFramingError</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[431]"></a>UART_IsRXParityError</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[432]"></a>UART_IsRXOverrunError</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[433]"></a>UART_IsRXReceived</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>UART_IsTXEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_SendDatas
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SER_PutChar
</UL>

<P><STRONG><a name="[434]"></a>UART_IsTXHoldingRegisterEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[435]"></a>UART_IsTXFIFOTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[436]"></a>UART_IsRXFIFOFull</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[437]"></a>UART_IsRXFIFONotEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[438]"></a>UART_IsTXFIFOEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[439]"></a>UART_IsTXFIFONotFull</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[43a]"></a>UART_IsBusy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[43b]"></a>UART_DMAGenerateSoftAck</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[43c]"></a>UART_TXHaltCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[43d]"></a>UART_FIFOAccessModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[43e]"></a>UART_FIFOTxRead</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>UART_IrDACmd</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, mhscpu_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[43f]"></a>UART_SendBreak</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mhscpu_uart.o(.text), UNUSED)

<P><STRONG><a name="[440]"></a>EXTI_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mhscpu_exti.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>EXTI_LineConfig</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, mhscpu_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI_LineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_NVICConfig
</UL>

<P><STRONG><a name="[441]"></a>EXTI_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mhscpu_exti.o(.text), UNUSED)

<P><STRONG><a name="[442]"></a>EXTI_GetITLineStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mhscpu_exti.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mhscpu_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>I2C_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mhscpu_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_DeInit &rArr; SYSCTRL_APBPeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CameraI2CGPIOConfig
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Config
</UL>

<P><STRONG><a name="[14b]"></a>I2C_Init</STRONG> (Thumb, 538 bytes, Stack size 64 bytes, mhscpu_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Config
</UL>

<P><STRONG><a name="[1ca]"></a>I2C_StructInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mhscpu_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Config
</UL>

<P><STRONG><a name="[14c]"></a>I2C_SetTargetAddress</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mhscpu_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBSetI2CAddr
</UL>

<P><STRONG><a name="[14d]"></a>I2C_Cmd</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mhscpu_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Config
</UL>

<P><STRONG><a name="[14e]"></a>I2C_DMAInit</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, mhscpu_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[443]"></a>I2C_DMAStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mhscpu_i2c.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>I2C_DMACmd</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mhscpu_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[151]"></a>I2C_IsEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetSDAHoldTime
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetSDASetupTime
</UL>

<P><STRONG><a name="[150]"></a>I2C_SetSDASetupTime</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, mhscpu_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsEnable
</UL>

<P><STRONG><a name="[152]"></a>I2C_SetSDAHoldTime</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mhscpu_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsEnable
</UL>

<P><STRONG><a name="[153]"></a>I2C_ITConfig</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mhscpu_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[154]"></a>I2C_GetITStatus</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, mhscpu_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[155]"></a>I2C_GetRawITStatus</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, mhscpu_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[156]"></a>I2C_ClearITPendingBit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, mhscpu_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[15d]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mhscpu_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveBytes
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendBytes
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBReadBytes
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBReadReg
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteRst
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteReg
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteBytes
</UL>

<P><STRONG><a name="[444]"></a>I2C_GetFlagStatusReg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_i2c.o(.text), UNUSED)

<P><STRONG><a name="[445]"></a>I2C_GetTXAbortSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_i2c.o(.text), UNUSED)

<P><STRONG><a name="[446]"></a>I2C_GetTXAbortSourceReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mhscpu_i2c.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>I2C_GetI2CMode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mhscpu_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveBytes
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
</UL>

<P><STRONG><a name="[159]"></a>I2C_WriteDataToDR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mhscpu_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGenerateReceiveSCL
</UL>

<P><STRONG><a name="[157]"></a>I2C_ExtendData</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, mhscpu_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_ExtendData
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGenerateReceiveSCL
</UL>

<P><STRONG><a name="[158]"></a>I2C_MasterGenerateReceiveSCL</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mhscpu_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_MasterGenerateReceiveSCL &rArr; I2C_ExtendData
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ExtendData
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDataToDR
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveBytes
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBReadBytes
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBReadReg
</UL>

<P><STRONG><a name="[15e]"></a>I2C_ReadDataFromDR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mhscpu_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveBytes
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBReadBytes
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBReadReg
</UL>

<P><STRONG><a name="[15a]"></a>I2C_SendData</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, mhscpu_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_SendData &rArr; I2C_ExtendData
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ExtendData
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDataToDR
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetI2CMode
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendBytes
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBReadBytes
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBReadReg
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteRst
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteReg
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteBytes
</UL>

<P><STRONG><a name="[15c]"></a>I2C_ReceiveData</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, mhscpu_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataFromDR
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGenerateReceiveSCL
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetI2CMode
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
</UL>

<P><STRONG><a name="[15f]"></a>I2C_SendBytes</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, mhscpu_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
</UL>

<P><STRONG><a name="[160]"></a>I2C_ReceiveBytes</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, mhscpu_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataFromDR
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGenerateReceiveSCL
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetI2CMode
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
</UL>

<P><STRONG><a name="[161]"></a>I2C_SlaveGeneralNACKOnlyCmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mhscpu_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[162]"></a>TIM_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mhscpu_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
</UL>

<P><STRONG><a name="[98]"></a>TIM_Cmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mhscpu_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMM0_Mdelay
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cameraclk_Configuration
</UL>

<P><STRONG><a name="[b3]"></a>TIM_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mhscpu_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Init &rArr; TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Configuration
</UL>

<P><STRONG><a name="[97]"></a>TIM_PWMInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, mhscpu_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_PWMInit &rArr; TIM_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cameraclk_Configuration
</UL>

<P><STRONG><a name="[163]"></a>TIM_ModeConfig</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, mhscpu_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[447]"></a>TIM_SetPeriod</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mhscpu_timer.o(.text), UNUSED)

<P><STRONG><a name="[448]"></a>TIM_SetPWMPeriod</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mhscpu_timer.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>TIM_ITConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mhscpu_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Configuration
</UL>

<P><STRONG><a name="[c7]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mhscpu_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_7_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_6_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_5_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_4_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_3_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_2_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_1_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_0_IRQHandler
</UL>

<P><STRONG><a name="[449]"></a>TIM_GetITStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mhscpu_timer.o(.text), UNUSED)

<P><STRONG><a name="[44a]"></a>TIM_GetAllITStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mhscpu_timer.o(.text), UNUSED)

<P><STRONG><a name="[44b]"></a>TIM_GetRawITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mhscpu_timer.o(.text), UNUSED)

<P><STRONG><a name="[44c]"></a>TIM_GetAllRawITStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mhscpu_timer.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>TIM_PWMSinglePulseConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mhscpu_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[44d]"></a>TIM_PWMReloadSinglePulse</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mhscpu_timer.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>isvalid_channel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_detect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_close
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CardSlotInfo
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CardSlotInfo
</UL>

<P><STRONG><a name="[165]"></a>emv_sci_reset</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_ConfigEMV
</UL>

<P><STRONG><a name="[196]"></a>select_slot</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_detect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_close
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_CardSlotInfo
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_CardSlotInfo
</UL>

<P><STRONG><a name="[44e]"></a>check_dev</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>SCI_ConfigEMV</STRONG> (Thumb, 172 bytes, Stack size 28 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SCI_ConfigEMV
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_sci_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Configuration
</UL>

<P><STRONG><a name="[167]"></a>SCI_MatchBaudReg</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SCI_MatchBaudReg
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_config
</UL>

<P><STRONG><a name="[197]"></a>emv_disturb_interruption</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_detect
</UL>

<P><STRONG><a name="[194]"></a>emv_hard_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_device_init
</UL>

<P><STRONG><a name="[166]"></a>emv_hard_config</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_MatchBaudReg
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_xmit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_warm_reset
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_cold_reset
</UL>

<P><STRONG><a name="[19f]"></a>emv_hard_detect</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_detect
</UL>

<P><STRONG><a name="[168]"></a>emv_hard_cold_reset</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = emv_hard_cold_reset &rArr; GPIO_PinRemapConfig &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_condsel_procedure
</UL>

<P><STRONG><a name="[16b]"></a>emv_hard_warm_reset</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = emv_hard_warm_reset &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
</UL>

<P><STRONG><a name="[16c]"></a>emv_hard_power_dump</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = emv_hard_power_dump &rArr; SET_ERR
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_close
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_ifsd_request
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_pump
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_condsel_procedure
</UL>

<P><STRONG><a name="[16d]"></a>emv_hard_power_pump</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = emv_hard_power_pump &rArr; emv_hard_power_dump &rArr; SET_ERR
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_core_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_condsel_procedure
</UL>

<P><STRONG><a name="[13]"></a>SCI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCI0_IRQHandler &rArr; SCIx_IRQHandler &rArr; SET_ERR
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SCI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCI1_IRQHandler &rArr; SCIx_IRQHandler &rArr; SET_ERR
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SCI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCI2_IRQHandler &rArr; SCIx_IRQHandler &rArr; SET_ERR
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(RESET)
</UL>
<P><STRONG><a name="[171]"></a>emv_hard_xmit</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
</UL>

<P><STRONG><a name="[8a]"></a>DAC_Cmd</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mhscpu_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Configuration
</UL>

<P><STRONG><a name="[89]"></a>DAC_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mhscpu_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DAC_Init &rArr; DAC_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Configuration
</UL>

<P><STRONG><a name="[44f]"></a>DAC_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mhscpu_dac.o(.text), UNUSED)

<P><STRONG><a name="[450]"></a>DAC_FIFOReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mhscpu_dac.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>DAC_DMACmd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mhscpu_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[5c]"></a>DAC_SetData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mhscpu_dac.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Test
</UL>

<P><STRONG><a name="[5b]"></a>DAC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mhscpu_dac.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Test
</UL>

<P><STRONG><a name="[173]"></a>DAC_ITConfig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mhscpu_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[174]"></a>DAC_GetITStatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mhscpu_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[175]"></a>DAC_ClearITPendingBit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mhscpu_dac.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[177]"></a>RTC_IsReady</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetRefRegister
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetRefRegister
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAttrackTime
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetCounter
</UL>

<P><STRONG><a name="[176]"></a>RTC_ResetCounter</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, mhscpu_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IsReady
</UL>

<P><STRONG><a name="[52]"></a>RTC_GetCounter</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, mhscpu_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_GetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Test
</UL>

<P><STRONG><a name="[178]"></a>RTC_SetAlarm</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, mhscpu_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IsReady
</UL>

<P><STRONG><a name="[4f]"></a>RTC_SetRefRegister</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, mhscpu_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetRefRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Test
</UL>

<P><STRONG><a name="[51]"></a>RTC_GetRefRegister</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, mhscpu_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_GetRefRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Test
</UL>

<P><STRONG><a name="[179]"></a>RTC_ITConfig</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mhscpu_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IsReady
</UL>

<P><STRONG><a name="[17a]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, mhscpu_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IsReady
</UL>

<P><STRONG><a name="[451]"></a>RTC_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_rtc.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>RTC_GetAttrackTime</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, mhscpu_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IsReady
</UL>

<P><STRONG><a name="[452]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_mhscpu.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_mhscpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mhscpu.o(.text)
</UL>
<P><STRONG><a name="[453]"></a>msr_get_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_msr.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>set_hard_wakeup_level</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, mhscpu_msr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dpu
</UL>

<P><STRONG><a name="[180]"></a>msr_memset</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, mhscpu_msr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = msr_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dpu
</UL>

<P><STRONG><a name="[17f]"></a>clear_dpu_int</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mhscpu_msr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dpu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_swiping_card
</UL>

<P><STRONG><a name="[6b]"></a>set_wakeup_status</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, mhscpu_msr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dpu
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_test
</UL>

<P><STRONG><a name="[6c]"></a>init_dpu</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, mhscpu_msr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_dpu &rArr; dpu_cal_dc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wakeup_status
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_dpu_int
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msr_memset
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hard_wakeup_level
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dpu_cal_dc
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_msr_mod
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_test
</UL>

<P><STRONG><a name="[18c]"></a>get_weight</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, mhscpu_msr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_weight
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_card_data
</UL>

<P><STRONG><a name="[182]"></a>get_track_data_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mhscpu_msr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_track_raw_data
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_swiping_card
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dpu_int_state
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fh_get_byte
</UL>

<P><STRONG><a name="[181]"></a>fh_get_byte</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, mhscpu_msr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fh_get_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_track_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_unmeaning_track_data
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_abnormal
</UL>

<P><STRONG><a name="[183]"></a>process_abnormal</STRONG> (Thumb, 226 bytes, Stack size 28 bytes, mhscpu_msr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = process_abnormal &rArr; fh_get_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fh_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_card_data
</UL>

<P><STRONG><a name="[184]"></a>process_unmeaning_track_data</STRONG> (Thumb, 174 bytes, Stack size 28 bytes, mhscpu_msr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = process_unmeaning_track_data &rArr; fh_get_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fh_get_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_card_data
</UL>

<P><STRONG><a name="[189]"></a>msr_memcpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mhscpu_msr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = msr_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_swiping_card
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_card_data
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dpu_track_raw_data
</UL>

<P><STRONG><a name="[187]"></a>is_odd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mhscpu_msr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_odd
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dpu_track_raw_data
</UL>

<P><STRONG><a name="[18a]"></a>get_dpu_int_state</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, mhscpu_msr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_dpu_int_state
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_track_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_track_raw_data
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_card_data
</UL>

<P><STRONG><a name="[18b]"></a>get_card_data</STRONG> (Thumb, 894 bytes, Stack size 464 bytes, mhscpu_msr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = get_card_data &rArr; get_dpu_track_raw_data &rArr; msr_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dpu_int_state
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msr_memcpy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_unmeaning_track_data
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_abnormal
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_weight
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dpu_track_raw_data
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decode_data
</UL>

<P><STRONG><a name="[18e]"></a>convert_card_data</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, mhscpu_msr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = convert_card_data
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decode_data
</UL>

<P><STRONG><a name="[6d]"></a>sc_sleep</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mhscpu_msr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_swiping_card
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_test
</UL>

<P><STRONG><a name="[6e]"></a>detect_swiping_card</STRONG> (Thumb, 534 bytes, Stack size 24 bytes, mhscpu_msr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = detect_swiping_card &rArr; msr_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sc_sleep
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msr_memcpy
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_track_data_len
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_dpu_int
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_msr_mod
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_20ms
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_test
</UL>

<P><STRONG><a name="[6f]"></a>get_decode_data</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, mhscpu_msr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = get_decode_data &rArr; get_card_data &rArr; get_dpu_track_raw_data &rArr; msr_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_card_data
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_card_data
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_test
</UL>

<P><STRONG><a name="[454]"></a>get_swipe_dir</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_msr.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>get_track_raw_data</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, mhscpu_msr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_track_raw_data &rArr; get_dpu_int_state
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dpu_int_state
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_track_data_len
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_test
</UL>

<P><STRONG><a name="[455]"></a>get_valid_bit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mhscpu_msr.o(.text), UNUSED)

<P><STRONG><a name="[456]"></a>set_swipe_dir</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_msr.o(.text), UNUSED)

<P><STRONG><a name="[457]"></a>msr_powerdown</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mhscpu_msr.o(.text), UNUSED)

<P><STRONG><a name="[458]"></a>msr_powerup</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mhscpu_msr.o(.text), UNUSED)

<P><STRONG><a name="[459]"></a>reset_adc</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, mhscpu_msr.o(.text), UNUSED)

<P><STRONG><a name="[45a]"></a>msr_disable_tkx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mhscpu_msr.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>emv_core_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, emv_queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_pump
</UL>

<P><STRONG><a name="[169]"></a>emv_queue_flush</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, emv_queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_pump
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_warm_reset
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_cold_reset
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
</UL>

<P><STRONG><a name="[190]"></a>emv_queue_empty</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, emv_queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
</UL>

<P><STRONG><a name="[45b]"></a>emv_queue_length</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, emv_queue.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>emv_queue_fill</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, emv_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = emv_queue_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
</UL>

<P><STRONG><a name="[18f]"></a>emv_queue_spill</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, emv_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = emv_queue_spill
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_timeout_type
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_analyser
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_recv
</UL>

<P><STRONG><a name="[45c]"></a>iso7816_getlibversion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iso7816_3.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>sci_getv</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, iso7816_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sci_getv
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_device_init
</UL>

<P><STRONG><a name="[10e]"></a>iso7816_device_init</STRONG> (Thumb, 212 bytes, Stack size 136 bytes, iso7816_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = iso7816_device_init &rArr; sci_getv
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_getv
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
</UL>

<P><STRONG><a name="[110]"></a>iso7816_init</STRONG> (Thumb, 480 bytes, Stack size 80 bytes, iso7816_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = iso7816_init &rArr; emv_t1_ifsd_request &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_atr_parse
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_ifsd_request
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_parse
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_analyser
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_pump
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_warm_reset
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_cold_reset
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_disturb_interruption
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_slot
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvalid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Test
</UL>

<P><STRONG><a name="[111]"></a>iso7816_exchange</STRONG> (Thumb, 262 bytes, Stack size 560 bytes, iso7816_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1476<LI>Call Chain = iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_disturb_interruption
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_slot
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvalid_channel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Test
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
</UL>

<P><STRONG><a name="[112]"></a>iso7816_close</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, iso7816_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iso7816_close &rArr; emv_hard_power_dump &rArr; SET_ERR
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_slot
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvalid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Test
</UL>

<P><STRONG><a name="[10f]"></a>iso7816_detect</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, iso7816_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = iso7816_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_detect
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_disturb_interruption
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_slot
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvalid_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Test
</UL>

<P><STRONG><a name="[1a0]"></a>Read_CardSlotInfo</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iso7816_3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_slot
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvalid_channel
</UL>

<P><STRONG><a name="[1a1]"></a>Write_CardSlotInfo</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, iso7816_3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_slot
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvalid_channel
</UL>

<P><STRONG><a name="[9e]"></a>DecodeInit</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, decodelib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = DecodeInit &rArr; DCMI_Configuration &rArr; DCMIDMAConfig &rArr; DCMIInitialize &rArr; DCMIDMAInitialize &rArr; DMA_MultiBlockInit &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Configuration
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeInitMempool
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeCheckOtp
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Configuration
</UL>

<P><STRONG><a name="[fd]"></a>DecodeDcmiStart</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, decodelib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DecodeDcmiStart &rArr; LLIDmaInit &rArr; DCMIDMAInitialize &rArr; DMA_MultiBlockInit &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLIDmaInit
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleBuffDecodeDemo
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBuffDecodeDemo
</UL>

<P><STRONG><a name="[101]"></a>DecodeStart</STRONG> (Thumb, 310 bytes, Stack size 352 bytes, decodelib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3320<LI>Call Chain = DecodeStart &rArr; BarDecodeStart &rArr; MhbarImageScanner &rArr; DataMatrixScanner &rArr; DMDataProcess &rArr; DMPerspectiveTransForm &rArr; CalcPerspectiveTransFormationMatrix &rArr; MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCodeID
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeStart
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleBuffDecodeDemo
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBuffDecodeDemo
</UL>

<P><STRONG><a name="[c3]"></a>DCMI_CallBackFrame</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, decodelib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DCMI_CallBackFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_IRQHandler
</UL>

<P><STRONG><a name="[1aa]"></a>SensorAEOn</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, decodelib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SensorAEOn &rArr; SCCBWriteRst &rArr; I2C_SendData &rArr; I2C_ExtendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteRst
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcmiGetPicFinish
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorModelClose
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSensorModel
</UL>

<P><STRONG><a name="[1ac]"></a>DcmiGetPicFinish</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, decodelib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DcmiGetPicFinish &rArr; SensorAEOn &rArr; SCCBWriteRst &rArr; I2C_SendData &rArr; I2C_ExtendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorAEOn
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeDcmiFinish
</UL>

<P><STRONG><a name="[fe]"></a>DecodeDcmiFinish</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, decodelib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DecodeDcmiFinish &rArr; DcmiGetPicFinish &rArr; SensorAEOn &rArr; SCCBWriteRst &rArr; I2C_SendData &rArr; I2C_ExtendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcmiGetPicFinish
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleBuffDecodeDemo
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBuffDecodeDemo
</UL>

<P><STRONG><a name="[102]"></a>CleanDecodeBuffFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, decodelib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleBuffDecodeDemo
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBuffDecodeDemo
</UL>

<P><STRONG><a name="[104]"></a>GetDecodeBuffFlag</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, decodelib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleBuffDecodeDemo
</UL>

<P><STRONG><a name="[1ad]"></a>CloseDecode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, decodelib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseHardDecode
</UL>

<P><STRONG><a name="[fc]"></a>DecodeConfigInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, decodelib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DecodeConfigInit
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleBuffDecodeDemo
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBuffDecodeDemo
</UL>

<P><STRONG><a name="[1b0]"></a>BCTCTestConfigInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, decodelib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1b1]"></a>SetSensorImageFlip</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, decodelib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetImageFlip
</UL>

<P><STRONG><a name="[1b3]"></a>SensorAEOff</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, decodelib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteRst
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antiFlicker
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CleanSensorModelFlag
</UL>

<P><STRONG><a name="[1b6]"></a>DecodeSensorModel</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, decodelib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorAEOn
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antiFlicker
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inductFindNew
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
</UL>

<P><STRONG><a name="[1b8]"></a>CleanSensorModelFlag</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, decodelib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorAEOff
</UL>

<P><STRONG><a name="[45d]"></a>SensorModelInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, decodelib.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>SensorModelClose</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, decodelib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorAEOn
</UL>

<P><STRONG><a name="[ff]"></a>GetImageBuffAddr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, decodelib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBuffDecodeDemo
</UL>

<P><STRONG><a name="[7f]"></a>GetDecodeLibVerison</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, decodelib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Test
</UL>

<P><STRONG><a name="[1ba]"></a>SensorWriteVal</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, decodelib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC031GSWriteExpoGainVal
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OV7251WriteExpoGainVal
</UL>

<P><STRONG><a name="[1be]"></a>Util_Decompress</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, sci_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Util_Decompress
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Test
</UL>

<P><STRONG><a name="[1bc]"></a>ParseBerTLVData</STRONG> (Thumb, 440 bytes, Stack size 1104 bytes, sci_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = ParseBerTLVData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Test
</UL>

<P><STRONG><a name="[1bd]"></a>ReadRecord</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sci_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1492<LI>Call Chain = ReadRecord &rArr; iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Test
</UL>

<P><STRONG><a name="[78]"></a>SCI_Test</STRONG> (Thumb, 1618 bytes, Stack size 3544 bytes, sci_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5036<LI>Call Chain = SCI_Test &rArr; ReadRecord &rArr; iso7816_exchange &rArr; emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_detect
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_close
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseBerTLVData
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Decompress
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCreditCardNumber
</UL>

<P><STRONG><a name="[1c0]"></a>emv_tell_case</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, emv_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t0_exchange
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_extract
</UL>

<P><STRONG><a name="[1c3]"></a>emv_t1_compute_lrc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, emv_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_recv
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
</UL>

<P><STRONG><a name="[1bf]"></a>emv_t1_extract</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, emv_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = emv_t1_extract &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_tell_case
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
</UL>

<P><STRONG><a name="[1c1]"></a>emv_t1_iblock_pack</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, emv_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = emv_t1_iblock_pack &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
</UL>

<P><STRONG><a name="[1c2]"></a>emv_t1_block_xmit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, emv_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_fill
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_xmit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_compute_lrc
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_ifsd_request
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
</UL>

<P><STRONG><a name="[1c5]"></a>emv_t1_block_recv</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, emv_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = emv_t1_block_recv &rArr; emv_queue_spill
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_compute_lrc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_ifsd_request
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
</UL>

<P><STRONG><a name="[198]"></a>emv_atr_analyser</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, emv_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = emv_atr_analyser &rArr; emv_queue_spill
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_condsel_procedure
</UL>

<P><STRONG><a name="[199]"></a>emv_atr_parse</STRONG> (Thumb, 650 bytes, Stack size 32 bytes, emv_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = emv_atr_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fi_const_table
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_const_table
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
</UL>

<P><STRONG><a name="[19d]"></a>emv_t0_exchange</STRONG> (Thumb, 896 bytes, Stack size 80 bytes, emv_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = emv_t0_exchange &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_fill
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_xmit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_tell_case
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
</UL>

<P><STRONG><a name="[19e]"></a>emv_t1_exchange</STRONG> (Thumb, 950 bytes, Stack size 840 bytes, emv_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = emv_t1_exchange &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_recv
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_iblock_pack
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_extract
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
</UL>

<P><STRONG><a name="[19c]"></a>emv_t1_ifsd_request</STRONG> (Thumb, 188 bytes, Stack size 272 bytes, emv_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = emv_t1_ifsd_request &rArr; emv_t1_block_xmit &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_recv
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_xmit
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
</UL>

<P><STRONG><a name="[191]"></a>adjust_timeout_type</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, emv_patch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
</UL>

<P><STRONG><a name="[19a]"></a>iso_atr_parse</STRONG> (Thumb, 838 bytes, Stack size 40 bytes, emv_patch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iso_atr_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fi_const_table
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_const_table
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
</UL>

<P><STRONG><a name="[1c8]"></a>iso_condsel_procedure</STRONG> (Thumb, 118 bytes, Stack size 128 bytes, emv_patch.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_analyser
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_pump
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_cold_reset
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[19b]"></a>iso_pps_procedure</STRONG> (Thumb, 548 bytes, Stack size 56 bytes, emv_patch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = iso_pps_procedure &rArr; emv_hard_xmit &rArr; emv_hard_config &rArr; SCI_MatchBaudReg
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_spill
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_fill
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_queue_flush
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_xmit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fi_const_table
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di_const_table
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_init
</UL>

<P><STRONG><a name="[1c9]"></a>SCCB_Config</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SCCB_Config &rArr; I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_StructInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitialize
</UL>

<P><STRONG><a name="[1cb]"></a>SCCBSetI2CAddr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sccb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetTargetAddress
</UL>

<P><STRONG><a name="[1b5]"></a>SCCBWriteReg</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SCCBWriteReg &rArr; I2C_SendData &rArr; I2C_ExtendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antiFlicker
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitialize
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSensorImageMirror
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SetImageFlip
</UL>

<P><STRONG><a name="[1ab]"></a>SCCBWriteRst</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SCCBWriteRst &rArr; I2C_SendData &rArr; I2C_ExtendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorAEOn
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorSoftRst
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorAEOff
</UL>

<P><STRONG><a name="[1cc]"></a>SCCBReadReg</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SCCBReadReg &rArr; I2C_SendData &rArr; I2C_ExtendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataFromDR
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGenerateReceiveSCL
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorReadID
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSensorImageMirror
</UL>

<P><STRONG><a name="[1cd]"></a>SCCBReadBytes</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SCCBReadBytes &rArr; I2C_SendData &rArr; I2C_ExtendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataFromDR
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterGenerateReceiveSCL
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorReadID
</UL>

<P><STRONG><a name="[1bb]"></a>SCCBWriteBytes</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SCCBWriteBytes &rArr; I2C_SendData &rArr; I2C_ExtendData
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorSoftRst
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitialize
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorWriteVal
</UL>

<P><STRONG><a name="[1a3]"></a>DCMI_Configuration</STRONG> (Thumb, 320 bytes, Stack size 120 bytes, setting.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = DCMI_Configuration &rArr; DCMIDMAConfig &rArr; DCMIInitialize &rArr; DCMIDMAInitialize &rArr; DMA_MultiBlockInit &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitialize
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMIDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeInit
</UL>

<P><STRONG><a name="[1af]"></a>CloseHardDecode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, setting.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphClockCmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Cmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDecode
</UL>

<P><STRONG><a name="[1d0]"></a>Delay_ms</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, setting.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
</UL>

<P><STRONG><a name="[1d1]"></a>Delay_us</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, setting.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorStart
</UL>

<P><STRONG><a name="[1d2]"></a>SetSensorImageMirror</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, setting.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBReadReg
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteReg
</UL>

<P><STRONG><a name="[1b2]"></a>_SetImageFlip</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, setting.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSensorImageFlip
</UL>

<P><STRONG><a name="[1d6]"></a>getAvgu8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sensormodel.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inductFindNew
</UL>

<P><STRONG><a name="[1d5]"></a>getMaxValue8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sensormodel.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inductFindNew
</UL>

<P><STRONG><a name="[45e]"></a>inductSensibilitySet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sensormodel.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>inductFindNew</STRONG> (Thumb, 618 bytes, Stack size 416 bytes, sensormodel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMaxValue8
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAvgu8
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGreyFrmIMG
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOldGreyScale
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSensorModel
</UL>

<P><STRONG><a name="[1d7]"></a>DCMIDMAInitialize</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, dcmidmacfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DCMIDMAInitialize &rArr; DMA_MultiBlockInit &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphClockCmd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MultiBlockInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_SetDMARequsetFIFOSize
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMIInitialize
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLIDmaInit
</UL>

<P><STRONG><a name="[1d8]"></a>DCMIInitialize</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dcmidmacfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DCMIInitialize &rArr; DCMIDMAInitialize &rArr; DMA_MultiBlockInit &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphResetCmd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_SetExtInput
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CaptureCmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Cmd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CROPCmd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_CROPConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMIDMAInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMIDMAConfig
</UL>

<P><STRONG><a name="[1a7]"></a>LLIDmaInit</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, dcmidmacfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LLIDmaInit &rArr; DCMIDMAInitialize &rArr; DMA_MultiBlockInit &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitLLI
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetDSRAddress
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMIDMAInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeDcmiStart
</UL>

<P><STRONG><a name="[1cf]"></a>DCMIDMAConfig</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, dcmidmacfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DCMIDMAConfig &rArr; DCMIInitialize &rArr; DCMIDMAInitialize &rArr; DMA_MultiBlockInit &rArr; DMA_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMIInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Configuration
</UL>

<P><STRONG><a name="[1dd]"></a>GetDecodeLog</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bardecode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>

<P><STRONG><a name="[1a4]"></a>BarDecodeInitMempool</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bardecode.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMempool
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeInit
</UL>

<P><STRONG><a name="[1e8]"></a>BarDecodeGetType</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, bardecode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeStart
</UL>

<P><STRONG><a name="[1e1]"></a>BarDecodeConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bardecode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCodeFncConfig
</UL>

<P><STRONG><a name="[1e0]"></a>BarCodeFncConfig</STRONG> (Thumb, 372 bytes, Stack size 12 bytes, bardecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BarCodeFncConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeStart
</UL>

<P><STRONG><a name="[1a8]"></a>BarDecodeStart</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, bardecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2968<LI>Call Chain = BarDecodeStart &rArr; MhbarImageScanner &rArr; DataMatrixScanner &rArr; DMDataProcess &rArr; DMPerspectiveTransForm &rArr; CalcPerspectiveTransFormationMatrix &rArr; MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageDestroy
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageCreate
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageConfig
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageScannerStructReset
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GatDmemoryFreeSize
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCodeFncConfig
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeGetType
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeStart
</UL>

<P><STRONG><a name="[1e9]"></a>BarDecodeCfgInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bardecode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[45f]"></a>BarDecodeFncConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bardecode.o(.text), UNUSED)

<P><STRONG><a name="[460]"></a>BarDecodeGetSymbolName</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, bardecode.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>BarDecodeCheckOtp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bardecode.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarCheckOtpChar
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeInit
</UL>

<P><STRONG><a name="[1eb]"></a>BarDecodeGetVerison</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bardecode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeGetVerison
</UL>

<P><STRONG><a name="[461]"></a>BarGetCustomizeType</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bardecode.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>dfree</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, dfree.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dfree
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExactEdgePoint
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMVersionCalc
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMReadData
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMDataProcess
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eras_dec_rs1
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetRow1
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetData
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Judge1
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417STEDScreen
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRNoLowPixBinary
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern2
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPatternSearch
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorrectPattern
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrDataDecode
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRMissingCornerDecode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerspectiveTransForm
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurveQRProcess
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SortRECT
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectDecode
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_free
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rls_free_memory
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_srch_rect
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OustGetHistThreshold
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarSortInt
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLSCalcPerspectiverParam
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRBackRunRegionLabel
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRRunRegionLabel
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary3
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_free_memory
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrFindPosition
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDecode
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Scanner
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPDF417SE
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMatrixScanner
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarFindLocation
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drealloc
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageDestroy
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageCreate
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageScannerStructReset
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSensorModel
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseDecode
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint2
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageLineMean
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLocBaceMulti
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelPBaseDis
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectLineMerge
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLine2Edge
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegmentBarCodeProcessing
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleMiddleLineMerge
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleDownLineMerge
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleUpLineMerge
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleEveLineMerge
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleOddLineMerge
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleLineMerge
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineEdgeMatch
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDFilterEdge
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417ScannerStEd
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterLineDecode
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTwoPointInterGrayInImage
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpIntLineSpline
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValidSubEdgeWave
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValidAddEdgeWave
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsFindErrorLocatorPoly
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLinkLst2
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLinkLst1
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineMean
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromBounding
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineMean
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417BinaryGetData
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitValidMark
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDataSingleDecode
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InverCobRecQRImage
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetPointFromCenter
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersion2
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersionData
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VersionCalcFromPoint
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPttnGrayThreshold
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAllAlignInterPoint
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiQR
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTimes
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGropDecode
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGeneralDecode
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrSortfloat
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeStandardDeviation
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDNSrchMaxMin
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2decode
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_modified_berlekamp_massey
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mldivide
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern2
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeStandardDeviation
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeInterleaved2of5
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode93
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode39
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode128List2I32
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_correct
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeastSquares
</UL>

<P><STRONG><a name="[1a5]"></a>dmalloc</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, dmalloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeInit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExactEdgePoint
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetQRBinaryLineData
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBinaryLineData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineData
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMVersionCalc
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMReadData
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMDataProcess
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eras_dec_rs1
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Judge1
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417STEDScreen
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRNoLowPixBinary
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern2
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorrectPattern
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRMissingCornerDecode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerspectiveTransForm
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurveQRProcess
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SortRECT
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectDecode
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rls_get_memory
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_srch_rect
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OustGetHistThreshold
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarSortInt
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLSCalcPerspectiverParam
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_get_memory
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDecode
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPDF417SE
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMatrixScanner
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drealloc
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint2
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelPBaseDis
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectLineMerge
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLine2Edge
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegmentBarCodeProcessing
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417ScannerStEd
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterLineDecode
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTwoPointInterGrayInImage
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpIntLineSpline
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValidSubEdgeWave
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValidAddEdgeWave
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsFindErrorLocatorPoly
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLinkLst2
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLinkLst1
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromBounding
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InverCobRecQRImage
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersion2
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersionData
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VersionCalcFromPoint
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPttnGrayThreshold
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAllAlignInterPoint
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGropDecode
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGeneralDecode
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrSortfloat
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeStandardDeviation
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDNSrchMaxMin
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_modified_berlekamp_massey
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mldivide
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern2
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeStandardDeviation
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeInterleaved2of5
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode93
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode39
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode128List2I32
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_correct
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeastSquares
</UL>

<P><STRONG><a name="[1a6]"></a>dcalloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dmalloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dcalloc &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeInit
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMVersionCalc
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetRow1
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetData
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern2
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPatternSearch
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorrectPattern
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrDataDecode
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRBackRunRegionLabel
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRRunRegionLabel
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary3
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrFindPosition
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDecode
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPDF417SE
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageCreate
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSensorModel
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectLineMerge
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleMiddleLineMerge
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleDownLineMerge
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleUpLineMerge
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleEveLineMerge
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleOddLineMerge
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleLineMerge
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineEdgeMatch
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDFilterEdge
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterLineDecode
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpIntLineSpline
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValidSubEdgeWave
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValidAddEdgeWave
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417BinaryGetData
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitValidMark
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDataSingleDecode
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGropDecode
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2decode
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode93
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode39
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode128List2I32
</UL>

<P><STRONG><a name="[1ed]"></a>drealloc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dmalloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>

<P><STRONG><a name="[1c6]"></a>fi_const_table</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emv_fidi_table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_atr_parse
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_parse
</UL>

<P><STRONG><a name="[1c7]"></a>di_const_table</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emv_fidi_table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_pps_procedure
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_atr_parse
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_parse
</UL>

<P><STRONG><a name="[462]"></a>fi_const_index</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, emv_fidi_table.o(.text), UNUSED)

<P><STRONG><a name="[463]"></a>di_const_index</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, emv_fidi_table.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>SensorReadID</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, config_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SensorReadID &rArr; SCCBReadBytes &rArr; I2C_SendData &rArr; I2C_ExtendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBReadBytes
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorIdentification
</UL>

<P><STRONG><a name="[1f0]"></a>SensorStart</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, config_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SensorStart &rArr; GPIO_SetBits &rArr; GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorIdentification
</UL>

<P><STRONG><a name="[1f1]"></a>SensorIdentification</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, config_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SensorIdentification &rArr; SensorReadID &rArr; SCCBReadBytes &rArr; I2C_SendData &rArr; I2C_ExtendData
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorStart
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorInitialize
</UL>

<P><STRONG><a name="[1ce]"></a>SensorInitialize</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, config_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SensorInitialize &rArr; SCCB_Config &rArr; I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_APBPeriphClockCmd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorIdentification
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Config
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteReg
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_Configuration
</UL>

<P><STRONG><a name="[1f2]"></a>SensorSoftRst</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, config_sensor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteRst
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteBytes
</UL>

<P><STRONG><a name="[1f3]"></a>OV7251WriteExpoGainVal</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, config_sensor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorWriteVal
</UL>

<P><STRONG><a name="[1f4]"></a>SC031GSWriteExpoGainVal</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, config_sensor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorWriteVal
</UL>

<P><STRONG><a name="[1ea]"></a>MhbarCheckOtpChar</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, img_scanner.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeCheckOtp
</UL>

<P><STRONG><a name="[1e3]"></a>MhbarImageCreate</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, img_scanner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MhbarImageCreate &rArr; dcalloc &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeStart
</UL>

<P><STRONG><a name="[1e7]"></a>MhbarImageDestroy</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, img_scanner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MhbarImageDestroy &rArr; dfree
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeStart
</UL>

<P><STRONG><a name="[1e6]"></a>ImageScannerStructReset</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, img_scanner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ImageScannerStructReset &rArr; dfree
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeStart
</UL>

<P><STRONG><a name="[1e4]"></a>MhbarImageConfig</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, img_scanner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MhbarImageConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeStart
</UL>

<P><STRONG><a name="[1e5]"></a>MhbarImageScanner</STRONG> (Thumb, 1860 bytes, Stack size 192 bytes, img_scanner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2920<LI>Call Chain = MhbarImageScanner &rArr; DataMatrixScanner &rArr; DMDataProcess &rArr; DMPerspectiveTransForm &rArr; CalcPerspectiveTransFormationMatrix &rArr; MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_barcode_rect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_get_memory
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_free_memory
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_clear_memory
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrFindPosition
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDecode
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Scanner
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectProcess
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDDecodeReset
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPointInRect
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageCalcContrastRatio
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPDF417SE
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDMAlignmentPatterns
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeterminePInPDF417
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMatrixScanner
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarFindLocation
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeStart
</UL>

<P><STRONG><a name="[464]"></a>MhbarImageFastBarScanner</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, img_scanner.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>DecodeGetVerison</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, img_scanner.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeGetVerison
</UL>

<P><STRONG><a name="[1df]"></a>InitMempool</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, img_scanner.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dinit_mempool
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeInitMempool
</UL>

<P><STRONG><a name="[208]"></a>dinit_mempool</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dinitmem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMempool
</UL>

<P><STRONG><a name="[1e2]"></a>GatDmemoryFreeSize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dinitmem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeStart
</UL>

<P><STRONG><a name="[229]"></a>Get8byteAlignAddr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dinitmem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern2
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLSCalcPerspectiverParam
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersion2
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAllAlignInterPoint
</UL>

<P><STRONG><a name="[1f6]"></a>Imagbinary</STRONG> (Thumb, 800 bytes, Stack size 224 bytes, imagbinary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Imagbinary &rArr; dcalloc &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphClockCmd
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_ImageBinaryInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_ImageAverageInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_GetFlagStatus
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DeInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Cmd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRNoLowPixBinary
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRLowPixProcess
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[20e]"></a>Imagbinary2</STRONG> (Thumb, 378 bytes, Stack size 152 bytes, imagbinary.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphClockCmd
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_ImageBinaryInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_ImageAverageInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_GetFlagStatus
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DeInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Cmd
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
</UL>

<P><STRONG><a name="[20f]"></a>Imagbinary3</STRONG> (Thumb, 764 bytes, Stack size 224 bytes, imagbinary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Imagbinary3 &rArr; dcalloc &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphClockCmd
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_ImageBinaryInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_ImageAverageInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_GetFlagStatus
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DeInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Cmd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRLowPixProcess
</UL>

<P><STRONG><a name="[210]"></a>ImageAverageCalc</STRONG> (Thumb, 144 bytes, Stack size 88 bytes, imagbinary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ImageAverageCalc &rArr; SYSCTRL_AHBPeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphClockCmd
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_ImageAverageInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_GetFlagStatus
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DeInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InverCobRecQRImage
</UL>

<P><STRONG><a name="[394]"></a>ImageBinaryCalc</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, imagbinary.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ImageBinaryCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InverCobRecQRImage
</UL>

<P><STRONG><a name="[211]"></a>CalcLineDel0PCS</STRONG> (Thumb, 60 bytes, Stack size 528 bytes, imagecalccontrastratio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = CalcLineDel0PCS &rArr; CalcHistPCS &rArr; OustGetHistThreshold &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcHistPCS
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageCalcContrastRatio
</UL>

<P><STRONG><a name="[1f5]"></a>ImageCalcContrastRatio</STRONG> (Thumb, 550 bytes, Stack size 104 bytes, imagecalccontrastratio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = ImageCalcContrastRatio &rArr; CalcLineDel0PCS &rArr; CalcHistPCS &rArr; OustGetHistThreshold &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcLineDel0PCS
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[215]"></a>RLCLineData2OutTable</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, runregionlabel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RLCLineData2OutTable
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRBackRunRegionLabel
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRRunRegionLabel
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
</UL>

<P><STRONG><a name="[217]"></a>RLC2LineDataProcess</STRONG> (Thumb, 914 bytes, Stack size 72 bytes, runregionlabel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RLC2LineDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRBackRunRegionLabel
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRRunRegionLabel
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
</UL>

<P><STRONG><a name="[1f7]"></a>RunRegionLabel</STRONG> (Thumb, 4348 bytes, Stack size 1336 bytes, runregionlabel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = RunRegionLabel &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_GetClocksFreq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphClockCmd
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_SetRLCDstAddr
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_ImageRLCInit
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_GetRLCNum
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLC2LineDataProcess
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLCLineData2OutTable
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_GetFlagStatus
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_DeInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPU_Cmd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[21d]"></a>QRRunRegionLabel</STRONG> (Thumb, 3018 bytes, Stack size 192 bytes, runregionlabel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = QRRunRegionLabel &rArr; RLC2LineDataProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLC2LineDataProcess
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLCLineData2OutTable
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaRunRegionLabel
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignRUNIndex
</UL>

<P><STRONG><a name="[21e]"></a>QRBackRunRegionLabel</STRONG> (Thumb, 1900 bytes, Stack size 176 bytes, runregionlabel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = QRBackRunRegionLabel &rArr; RLC2LineDataProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLC2LineDataProcess
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RLCLineData2OutTable
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPatternSearch
</UL>

<P><STRONG><a name="[21f]"></a>CMCalcParamYKXB</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, codemath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CMCalcParamYKXB &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
</UL>

<P><STRONG><a name="[221]"></a>CMCalcKB</STRONG> (Thumb, 466 bytes, Stack size 64 bytes, codemath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[225]"></a>CMCalcKB2</STRONG> (Thumb, 588 bytes, Stack size 64 bytes, codemath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CMCalcKB2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
</UL>

<P><STRONG><a name="[227]"></a>OLSCalcPerspectiverMatrix</STRONG> (Thumb, 1684 bytes, Stack size 176 bytes, codemath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = OLSCalcPerspectiverMatrix &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern2
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersion2
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAllAlignInterPoint
</UL>

<P><STRONG><a name="[228]"></a>OLSCalcPerspectiverParam</STRONG> (Thumb, 2078 bytes, Stack size 88 bytes, codemath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = OLSCalcPerspectiverParam &rArr; MatrixInverseF &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInverseF
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get8byteAlignAddr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiveMatrix
</UL>

<P><STRONG><a name="[22b]"></a>CalcTwoPointExtedP</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, codemath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CalcTwoPointExtedP &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExactEdgePoint
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPDF417Rect
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
</UL>

<P><STRONG><a name="[22c]"></a>Calc2PointVerticalP</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, codemath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Calc2PointVerticalP &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExactEdgePoint
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
</UL>

<P><STRONG><a name="[292]"></a>DeterminePointInRect</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, codemath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DeterminePointInRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeterminePInPDF417
</UL>

<P><STRONG><a name="[1fe]"></a>IsPointInRect</STRONG> (Thumb, 152 bytes, Stack size 44 bytes, codemath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IsPointInRect
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SortRECT
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiltrateQRDMRect
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMatrixScanner
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[22d]"></a>BarSortInt</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, codemath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
</UL>

<P><STRONG><a name="[22e]"></a>X2Y2</STRONG> (Thumb, 1038 bytes, Stack size 96 bytes, codemath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = X2Y2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRMissingCornerDecode
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint2
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageLineMean
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectPFromD
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCompensation
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PFromKB
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternCompensation
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern2
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern
</UL>

<P><STRONG><a name="[230]"></a>Calc2LineCross</STRONG> (Thumb, 570 bytes, Stack size 72 bytes, codemath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[232]"></a>Calc2LineCross2</STRONG> (Thumb, 518 bytes, Stack size 72 bytes, codemath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Calc2LineCross2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarFindLocation
</UL>

<P><STRONG><a name="[239]"></a>CalcVerticalLinesIntersection</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, codemath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CalcVerticalLinesIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPointToLineSegmentDistSquare
</UL>

<P><STRONG><a name="[465]"></a>Calc2LineIntersect</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, codemath.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>fCalc2LineIntersect</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, codemath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fCalc2LineIntersect
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerisonCalcNew
</UL>

<P><STRONG><a name="[233]"></a>determainat</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, codemath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_intersect
</UL>

<P><STRONG><a name="[234]"></a>bar_intersect</STRONG> (Thumb, 410 bytes, Stack size 120 bytes, codemath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determainat
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[236]"></a>OustGetHistThreshold</STRONG> (Thumb, 384 bytes, Stack size 120 bytes, codemath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = OustGetHistThreshold &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcHistPCS
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineHistThr
</UL>

<P><STRONG><a name="[26a]"></a>GetRectMBR</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, codemath.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectProcess
</UL>

<P><STRONG><a name="[237]"></a>CalcPCS</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, codemath.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcHistPCS
</UL>

<P><STRONG><a name="[2ab]"></a>CalcLinePCS</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, codemath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CalcLinePCS
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bar_get_binpcs
</UL>

<P><STRONG><a name="[212]"></a>CalcHistPCS</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, codemath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CalcHistPCS &rArr; OustGetHistThreshold &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPCS
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OustGetHistThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcLineDel0PCS
</UL>

<P><STRONG><a name="[238]"></a>CalcPointToLineSegmentDistSquare</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, codemath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CalcPointToLineSegmentDistSquare &rArr; CalcVerticalLinesIntersection
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcVerticalLinesIntersection
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SortRECT
</UL>

<P><STRONG><a name="[23a]"></a>COSineLawA</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, codemath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>

<P><STRONG><a name="[1fd]"></a>BarFindLocation</STRONG> (Thumb, 1516 bytes, Stack size 216 bytes, findlocation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = BarFindLocation &rArr; __hardfp_tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[200]"></a>bar_get_memory</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, newdecodelocation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bar_get_memory &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[201]"></a>bar_clear_memory</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, newdecodelocation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bar_clear_memory
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[204]"></a>bar_free_memory</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, newdecodelocation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bar_free_memory &rArr; dfree
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[23e]"></a>rls_get_memory</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, newdecodelocation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
</UL>

<P><STRONG><a name="[23f]"></a>rls_clear_memory</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, newdecodelocation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[240]"></a>rls_free_memory</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, newdecodelocation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
</UL>

<P><STRONG><a name="[241]"></a>bar_process_rect</STRONG> (Thumb, 266 bytes, Stack size 112 bytes, newdecodelocation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_take_only_img_data
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_incremental_bound_detection
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_decreasing_bound_detection
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc_is_null
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_free
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[466]"></a>bar_rect_composit</STRONG> (Thumb, 742 bytes, Stack size 36 bytes, newdecodelocation.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>barcode_position</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, newdecodelocation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bar_get_pcs
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_srch_rect
</UL>

<P><STRONG><a name="[256]"></a>lrc_sqrt</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, newdecodelocation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lrc_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_point_line_distance
</UL>

<P><STRONG><a name="[250]"></a>lrc_get_angle</STRONG> (Thumb, 658 bytes, Stack size 328 bytes, newdecodelocation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lrc_get_angle &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_barcode_rect
</UL>

<P><STRONG><a name="[258]"></a>lrc_line_point</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, newdecodelocation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lrc_line_point
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_lrcline
</UL>

<P><STRONG><a name="[260]"></a>lrc_line_move</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, newdecodelocation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
</UL>

<P><STRONG><a name="[252]"></a>lrc_get_point_distance</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, newdecodelocation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_max_distance_line
</UL>

<P><STRONG><a name="[253]"></a>lrc_get_point_line_distance</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, newdecodelocation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = lrc_get_point_line_distance &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_sqrt
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
</UL>

<P><STRONG><a name="[257]"></a>lrc_get_lrcline</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, newdecodelocation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lrc_get_lrcline &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_line_point
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
</UL>

<P><STRONG><a name="[259]"></a>lrc_rect_facture_merge</STRONG> (Thumb, 576 bytes, Stack size 104 bytes, newdecodelocation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lrc_rect_facture_merge &rArr; met_count_line_coordinate &rArr; met_count_line_parameter &rArr; met_line_equation_matrix &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point_of_intersection
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_line_coordinate
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_distance_between_two_points
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
</UL>

<P><STRONG><a name="[25c]"></a>lrc_rect_redress</STRONG> (Thumb, 910 bytes, Stack size 280 bytes, newdecodelocation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = lrc_rect_redress &rArr; met_count_line_coordinate &rArr; met_count_line_parameter &rArr; met_line_equation_matrix &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_take_only_img_data
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_point_angle_get_line
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_incremental_bound_detection
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_decreasing_bound_detection
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point_of_intersection
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_line_coordinate
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_distance_between_two_points
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc_is_null
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_free
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
</UL>

<P><STRONG><a name="[25f]"></a>lrc_find_angle_barcode_rect</STRONG> (Thumb, 3218 bytes, Stack size 880 bytes, newdecodelocation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480<LI>Call Chain = lrc_find_angle_barcode_rect &rArr; lrc_rect_redress &rArr; met_count_line_coordinate &rArr; met_count_line_parameter &rArr; met_line_equation_matrix &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_take_only_img_data
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_incremental_bound_detection
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_decreasing_bound_detection
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_distance_between_two_points
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc_is_null
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_free
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_redress
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_facture_merge
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_lrcline
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_point_line_distance
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_line_move
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_max_distance_line
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_barcode_rect
</UL>

<P><STRONG><a name="[261]"></a>lrc_get_histogram_angle</STRONG> (Thumb, 912 bytes, Stack size 280 bytes, newdecodelocation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lrc_get_histogram_angle &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_barcode_rect
</UL>

<P><STRONG><a name="[202]"></a>lrc_find_barcode_rect</STRONG> (Thumb, 202 bytes, Stack size 128 bytes, newdecodelocation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = lrc_find_barcode_rect &rArr; lrc_find_angle_barcode_rect &rArr; lrc_rect_redress &rArr; met_count_line_coordinate &rArr; met_count_line_parameter &rArr; met_line_equation_matrix &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_histogram_angle
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_angle
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[264]"></a>OneDAdjustRect4</STRONG> (Thumb, 1294 bytes, Stack size 128 bytes, onedrectprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OneDAdjustRect4 &rArr; GetCrossPoint &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustPointInImage
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectProcess
</UL>

<P><STRONG><a name="[467]"></a>RectFiltrate</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, onedrectprocess.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>RectDelSame</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, onedrectprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RectDelSame &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectProcess
</UL>

<P><STRONG><a name="[267]"></a>FiltrateQRDMRect</STRONG> (Thumb, 434 bytes, Stack size 192 bytes, onedrectprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = FiltrateQRDMRect &rArr; IsPointInRect
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPointInRect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectProcess
</UL>

<P><STRONG><a name="[203]"></a>OneDRectProcess</STRONG> (Thumb, 636 bytes, Stack size 344 bytes, onedrectprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568<LI>Call Chain = OneDRectProcess &rArr; OneDRectDecode &rArr; OneDRectGropDecode &rArr; OneDRectLineMerge &rArr; OneDLine2Edge &rArr; OneDEdgeEnhancedFilter2 &rArr; GetLineHistThr &rArr; OustGetHistThreshold &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SortRECT
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectDecode
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiltrateQRDMRect
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RectDelSame
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDAdjustRect4
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRectMBR
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[2e2]"></a>GetNodeVariety</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, oneddecodemain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetNodeVariety
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EANUPCDecodeAddOn
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EANUPCContinueDecode
</UL>

<P><STRONG><a name="[26f]"></a>VarietyWCodeInit2Node</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, oneddecodemain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VarietyWCodeInit2Node
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code128Code93CalcCode
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EANUPCCalcCode
</UL>

<P><STRONG><a name="[270]"></a>VarietyWInitNewNode</STRONG> (Thumb, 298 bytes, Stack size 36 bytes, oneddecodemain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VarietyWInitNewNode
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code128Code93CalcCode
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EANUPCCalcCode
</UL>

<P><STRONG><a name="[26c]"></a>VarietyWidthCR</STRONG> (Thumb, 294 bytes, Stack size 36 bytes, oneddecodemain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VarietyWidthCR
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarietyWCalcError
</UL>

<P><STRONG><a name="[26b]"></a>VarietyWCalcError</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, oneddecodemain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = VarietyWCalcError &rArr; VarietyWidthCR
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarietyWidthCR
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarietyWCalCMinErr
</UL>

<P><STRONG><a name="[26d]"></a>VarietyWCalCMinErr</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, oneddecodemain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = VarietyWCalCMinErr &rArr; VarietyWCalcError &rArr; VarietyWidthCR
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarietyWCalcError
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code128Code93CalcCode
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EANUPCCalcCode
</UL>

<P><STRONG><a name="[272]"></a>FindCodePostion</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, oneddecodemain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FindCodePostion
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code128Code93CalcCode
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EAN13Decode
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EANUPCCalcCode
</UL>

<P><STRONG><a name="[2ea]"></a>CodesCompare</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, oneddecodemain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CodesCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAN13AndUPCADecode
</UL>

<P><STRONG><a name="[468]"></a>Code128Code93Search</STRONG> (Thumb, 486 bytes, Stack size 40 bytes, oneddecodemain.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>CodesReverse</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, oneddecodemain.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code128Code93CalcCode
</UL>

<P><STRONG><a name="[26e]"></a>Code128Code93CalcCode</STRONG> (Thumb, 642 bytes, Stack size 160 bytes, oneddecodemain.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodesReverse
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCodePostion
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarietyWCalCMinErr
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarietyWInitNewNode
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarietyWCodeInit2Node
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[207]"></a>OneDDecodeReset</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, oneddecodemain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OneDDecodeReset
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDDecode
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[273]"></a>OneDDecode</STRONG> (Thumb, 388 bytes, Stack size 352 bytes, oneddecodemain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = OneDDecode &rArr; OneDDecodeReset
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDDecodeReset
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDDecodeMain
</UL>

<P><STRONG><a name="[2dc]"></a>OneDDecodePrepro</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, oneddecodemain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OneDDecodePrepro
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectDecode
</UL>

<P><STRONG><a name="[274]"></a>OneDDecodeMain</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, oneddecodemain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = OneDDecodeMain &rArr; OneDDecode &rArr; OneDDecodeReset
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDDecode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OneDGropDecode
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterLineDecode
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
</UL>

<P><STRONG><a name="[367]"></a>IsOneDDecodeIng</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oneddecodemain.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGeneralDecode
</UL>

<P><STRONG><a name="[366]"></a>ResetDecodeState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oneddecodemain.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGeneralDecode
</UL>

<P><STRONG><a name="[1ff]"></a>QRDecode</STRONG> (Thumb, 542 bytes, Stack size 80 bytes, qr_decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2344<LI>Call Chain = QRDecode &rArr; QRMissingCornerDecode &rArr; QRDecodeV1 &rArr; PerspectiveTransForm &rArr; CalcPerspectiveTransFormationMatrix &rArr; MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrPositionCalc
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrDataDecode
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRMissingCornerDecode
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDecodeV1
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerspectiveTransForm
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurveQRProcess
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[1f8]"></a>QrFindPosition</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, qrfindposition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416<LI>Call Chain = QrFindPosition &rArr; FindPatternSearch &rArr; PatternCompensation &rArr; PatternPoint2 &rArr; KFromFinderPattern &rArr;  KFromFinderPattern (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPatternSearch2
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPatternSearch
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[275]"></a>QrPositionCalc</STRONG> (Thumb, 2378 bytes, Stack size 184 bytes, qrfindposition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016<LI>Call Chain = QrPositionCalc &rArr; VerisonCalcNew &rArr; QRGetVersion2 &rArr; CalcPerspectiveMatrix &rArr; OLSCalcPerspectiverParam &rArr; MatrixInverseF &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerisonCalcNew
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerisonCalc
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRNoLowPixBinary
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRLowPixProcess
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern2
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P4Compensation
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFourthPoint
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorrectPattern
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaRunRegionLabel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDecode
</UL>

<P><STRONG><a name="[288]"></a>PDF417STEDScreen</STRONG> (Thumb, 674 bytes, Stack size 88 bytes, findpdf417.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = PDF417STEDScreen &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPDF417SE
</UL>

<P><STRONG><a name="[1fa]"></a>FindPDF417SE</STRONG> (Thumb, 4552 bytes, Stack size 432 bytes, findpdf417.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = FindPDF417SE &rArr; PDF417Judge &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Judge1
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Judge
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTwoEdgeFromOnePoint
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417STEDScreen
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[205]"></a>PDF417Scanner</STRONG> (Thumb, 262 bytes, Stack size 64 bytes, pdf417scanner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = PDF417Scanner &rArr; PDF417GetData &rArr; interp &rArr; dcalloc &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eras_dec_rs1
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetRow1
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetData
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Analysis
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[291]"></a>GetPDF417Rect</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, pdf417scanner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetPDF417Rect &rArr; CalcTwoPointExtedP &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTwoPointExtedP
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeterminePInPDF417
</UL>

<P><STRONG><a name="[1fb]"></a>DeterminePInPDF417</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, pdf417scanner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DeterminePInPDF417 &rArr; GetPDF417Rect &rArr; CalcTwoPointExtedP &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPDF417Rect
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeterminePointInRect
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[1fc]"></a>FindDMAlignmentPatterns</STRONG> (Thumb, 588 bytes, Stack size 136 bytes, datamatrixscanner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = FindDMAlignmentPatterns &rArr; DMDetector &rArr; LineMean &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDuraImprecise
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMDetector
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[295]"></a>DMDataProcess</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, datamatrixscanner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2368<LI>Call Chain = DMDataProcess &rArr; DMPerspectiveTransForm &rArr; CalcPerspectiveTransFormationMatrix &rArr; MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsDecode
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DmGetDataAndErrSum
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMdataAnalysis
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMRemoveAlignmentPattern
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMReadData
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMPerspectiveTransForm
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMatrixScanner
</UL>

<P><STRONG><a name="[206]"></a>DataMatrixScanner</STRONG> (Thumb, 1134 bytes, Stack size 360 bytes, datamatrixscanner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2728<LI>Call Chain = DataMatrixScanner &rArr; DMDataProcess &rArr; DMPerspectiveTransForm &rArr; CalcPerspectiveTransFormationMatrix &rArr; MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMVersionCalc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMDataProcess
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPointInRect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
</UL>

<P><STRONG><a name="[209]"></a>GPU_DeInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mhscpu_gpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPU_DeInit &rArr; SYSCTRL_AHBPeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_AHBPeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageAverageCalc
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary3
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary
</UL>

<P><STRONG><a name="[20a]"></a>GPU_ImageAverageInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mhscpu_gpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageAverageCalc
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary3
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary2
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary
</UL>

<P><STRONG><a name="[20d]"></a>GPU_ImageBinaryInit</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, mhscpu_gpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPU_ImageBinaryInit
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary3
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary2
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary
</UL>

<P><STRONG><a name="[213]"></a>GPU_ImageRLCInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mhscpu_gpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPU_ImageRLCInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
</UL>

<P><STRONG><a name="[20b]"></a>GPU_Cmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mhscpu_gpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageAverageCalc
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary3
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary
</UL>

<P><STRONG><a name="[214]"></a>GPU_GetRLCNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mhscpu_gpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
</UL>

<P><STRONG><a name="[216]"></a>GPU_SetRLCDstAddr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mhscpu_gpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
</UL>

<P><STRONG><a name="[469]"></a>GPU_ITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mhscpu_gpu.o(.text), UNUSED)

<P><STRONG><a name="[46a]"></a>GPU_GetITStatus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mhscpu_gpu.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>GPU_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mhscpu_gpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageAverageCalc
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary3
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary
</UL>

<P><STRONG><a name="[29d]"></a>GetLineData</STRONG> (Thumb, 428 bytes, Stack size 64 bytes, getlinedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GetLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetRow1
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetData
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Judge1
</UL>

<P><STRONG><a name="[29e]"></a>GetBinaryLineData</STRONG> (Thumb, 1072 bytes, Stack size 112 bytes, getlinedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Judge
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageLineMean
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLocBaceMulti
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineMean
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineMean
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetPointFromCenter
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersionData
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VersionCalcFromPoint
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiQR
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTimes
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern2
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern
</UL>

<P><STRONG><a name="[29f]"></a>GetQRBinaryLineData</STRONG> (Thumb, 1282 bytes, Stack size 120 bytes, getlinedata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
</UL>

<P><STRONG><a name="[2a2]"></a>GetTwoPointGrayInImage</STRONG> (Thumb, 484 bytes, Stack size 60 bytes, getlinedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GetTwoPointGrayInImage
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExactEdgePoint
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSetSingleLineInfo
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTwoPointInterGrayInImage
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPttnGrayThreshold
</UL>

<P><STRONG><a name="[265]"></a>AdjustPointInImage</STRONG> (Thumb, 578 bytes, Stack size 56 bytes, getlinedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AdjustPointInImage
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDAdjustRect4
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSetSingleLineInfo
</UL>

<P><STRONG><a name="[34e]"></a>GetLineMaxMinGrayValue</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, getlinedata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetLineMaxMinGrayValue
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterLineDecode
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDGetEdgeAreaThr
</UL>

<P><STRONG><a name="[28a]"></a>GetTwoEdgeFromOnePoint</STRONG> (Thumb, 1144 bytes, Stack size 48 bytes, gettwoedgefromonepoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = GetTwoEdgeFromOnePoint &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDuraImprecise
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPDF417SE
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMCenterPoint
</UL>

<P><STRONG><a name="[2a0]"></a>ExactEdgePoint</STRONG> (Thumb, 594 bytes, Stack size 168 bytes, perspectivetransform.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineEdge
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcIntPointNScaleInLine
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTwoPointGrayInImage
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2PointVerticalP
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTwoPointExtedP
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
</UL>

<P><STRONG><a name="[2a4]"></a>CalcPerspectiveTransFormationMatrix</STRONG> (Thumb, 1236 bytes, Stack size 616 bytes, perspectivetransform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = CalcPerspectiveTransFormationMatrix &rArr; MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInverse
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMPerspectiveTransForm
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerspectiveTransForm
</UL>

<P><STRONG><a name="[276]"></a>PerspectiveTransForm</STRONG> (Thumb, 1190 bytes, Stack size 168 bytes, perspectivetransform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = PerspectiveTransForm &rArr; CalcPerspectiveTransFormationMatrix &rArr; MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiveTransFormationMatrix
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRMissingCornerDecode
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDecodeV1
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDecode
</UL>

<P><STRONG><a name="[296]"></a>DMPerspectiveTransForm</STRONG> (Thumb, 2624 bytes, Stack size 512 bytes, perspectivetransform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2328<LI>Call Chain = DMPerspectiveTransForm &rArr; CalcPerspectiveTransFormationMatrix &rArr; MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiveTransFormationMatrix
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMDataProcess
</UL>

<P><STRONG><a name="[2a6]"></a>CalcPerspectiveMatrix</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, perspectivetransform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = CalcPerspectiveMatrix &rArr; OLSCalcPerspectiverParam &rArr; MatrixInverseF &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInverseF
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLSCalcPerspectiverParam
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern2
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersion2
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAllAlignInterPoint
</UL>

<P><STRONG><a name="[2a7]"></a>CalcPerspectiverXY</STRONG> (Thumb, 506 bytes, Stack size 80 bytes, perspectivetransform.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CalcPerspectiverXY &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern2
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersion2
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAllAlignInterPoint
</UL>

<P><STRONG><a name="[2a5]"></a>MatrixInverse</STRONG> (Thumb, 494 bytes, Stack size 1112 bytes, matrixinverse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiveTransFormationMatrix
</UL>

<P><STRONG><a name="[22a]"></a>MatrixInverseF</STRONG> (Thumb, 468 bytes, Stack size 1104 bytes, matrixinverse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = MatrixInverseF &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiveMatrix
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLSCalcPerspectiverParam
</UL>

<P><STRONG><a name="[2a8]"></a>QrSortfloat</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, qrsort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = QrSortfloat &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Median
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLinkLst2
</UL>

<P><STRONG><a name="[268]"></a>SortRECT</STRONG> (Thumb, 760 bytes, Stack size 112 bytes, qrsort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SortRECT &rArr; CalcPointToLineSegmentDistSquare &rArr; CalcVerticalLinesIntersection
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPointToLineSegmentDistSquare
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPointInRect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectProcess
</UL>

<P><STRONG><a name="[2a9]"></a>fr_get_gary_sub</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, findrect.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bar_get_pcs
</UL>

<P><STRONG><a name="[24f]"></a>fr_bar_get_pcs</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, findrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_gary_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barcode_position
</UL>

<P><STRONG><a name="[2aa]"></a>fr_bar_get_binpcs</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, findrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcLinePCS
</UL>

<P><STRONG><a name="[2ac]"></a>fr_adiust_rect_direction</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, findrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2ad]"></a>fr_filter_line</STRONG> (Thumb, 210 bytes, Stack size 88 bytes, findrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_decreasing_bound_detection
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2b7]"></a>fr_filter_point</STRONG> (Thumb, 346 bytes, Stack size 52 bytes, findrect.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_vertical_detect_line
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_level_detect_line
</UL>

<P><STRONG><a name="[2b4]"></a>fr_set_line_range</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, findrect.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_vertical_extend_line
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_level_extend_line
</UL>

<P><STRONG><a name="[2ae]"></a>fr_angle_match</STRONG> (Thumb, 114 bytes, Stack size 160 bytes, findrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_vertical_extend_line
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_level_extend_line
</UL>

<P><STRONG><a name="[2af]"></a>fr_level_connect_line</STRONG> (Thumb, 572 bytes, Stack size 120 bytes, findrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_decreasing_bound_detection
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc_is_null
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_level_extend_line
</UL>

<P><STRONG><a name="[2b0]"></a>fr_vertical_connect_line</STRONG> (Thumb, 584 bytes, Stack size 104 bytes, findrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc_is_null
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_free
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_ver_decreasing_board
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_vertical_extend_line
</UL>

<P><STRONG><a name="[2b2]"></a>fr_level_extend_line</STRONG> (Thumb, 1026 bytes, Stack size 184 bytes, findrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_distance_between_two_points
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_positional_relationship
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_level_connect_line
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_angle_match
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_set_line_range
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_level_detect_line
</UL>

<P><STRONG><a name="[2b5]"></a>fr_vertical_extend_line</STRONG> (Thumb, 1026 bytes, Stack size 184 bytes, findrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_distance_between_two_points
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_positional_relationship
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_vertical_connect_line
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_angle_match
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_set_line_range
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_vertical_detect_line
</UL>

<P><STRONG><a name="[2b6]"></a>fr_level_detect_line</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, findrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_level_extend_line
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_filter_point
</UL>

<P><STRONG><a name="[2b8]"></a>fr_vertical_detect_line</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, findrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_vertical_extend_line
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_filter_point
</UL>

<P><STRONG><a name="[2b9]"></a>fr_inside_rect</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, findrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[2ba]"></a>fr_level_detect_rect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, findrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
</UL>

<P><STRONG><a name="[2bb]"></a>fr_vertical_detect_rect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, findrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
</UL>

<P><STRONG><a name="[2bc]"></a>fr_get_line_group</STRONG> (Thumb, 240 bytes, Stack size 496 bytes, leveldetectionrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_from_line
</UL>

<P><STRONG><a name="[2be]"></a>fr_sort_out_expand</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, leveldetectionrect.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_divide_line
</UL>

<P><STRONG><a name="[2bd]"></a>fr_divide_line</STRONG> (Thumb, 552 bytes, Stack size 56 bytes, leveldetectionrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc_is_null
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_sort_out_expand
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_from_line
</UL>

<P><STRONG><a name="[2bf]"></a>fr_get_rect_expend</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, leveldetectionrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_distance_between_two_points
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_clockwise_rotation45
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_anticlockwise_rotation90
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_from_line
</UL>

<P><STRONG><a name="[2c2]"></a>fr_filter_rect</STRONG> (Thumb, 230 bytes, Stack size 64 bytes, leveldetectionrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_take_only_img_data
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_decreasing_bound_detection
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc_is_null
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_from_line
</UL>

<P><STRONG><a name="[2c3]"></a>fr_get_rect_from_line</STRONG> (Thumb, 508 bytes, Stack size 112 bytes, leveldetectionrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc_is_null
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_free
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_filter_rect
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_expend
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_divide_line
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_line_group
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
</UL>

<P><STRONG><a name="[2c4]"></a>fr_get_rect_group</STRONG> (Thumb, 774 bytes, Stack size 128 bytes, leveldetectionrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_distance_between_two_points
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc_is_null
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_free
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_is_point_in_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
</UL>

<P><STRONG><a name="[43]"></a>fr_is_rect_contain_with_other</STRONG> (Thumb, 214 bytes, Stack size 80 bytes, leveldetectionrect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fr_is_rect_contain_with_other &rArr; met_is_point_in_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_is_point_in_rect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leveldetectionrect.o(.text)
</UL>
<P><STRONG><a name="[2c6]"></a>fr_delete_contain_rect</STRONG> (Thumb, 428 bytes, Stack size 72 bytes, leveldetectionrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc_is_null
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_free
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
</UL>

<P><STRONG><a name="[2c7]"></a>fr_merge_rectangle</STRONG> (Thumb, 1530 bytes, Stack size 280 bytes, leveldetectionrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_take_only_img_data
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_incremental_bound_detection
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_decreasing_bound_detection
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point_of_intersection
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_line_coordinate
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_distance_between_two_points
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc_is_null
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_free
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_is_point_in_rect
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_horizontal_placement_rect
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_line_coordinate
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_whole1
</UL>

<P><STRONG><a name="[2ca]"></a>fr_merge_whole1</STRONG> (Thumb, 198 bytes, Stack size 128 bytes, leveldetectionrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_is_point_in_rect
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_process_coincide
</UL>

<P><STRONG><a name="[2cb]"></a>fr_merge_whole2</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, leveldetectionrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_two_lines_instersect
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_is_point_in_rect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_process_coincide
</UL>

<P><STRONG><a name="[2cd]"></a>fr_process_coincide</STRONG> (Thumb, 406 bytes, Stack size 72 bytes, leveldetectionrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc_is_null
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_free
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_whole2
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_whole1
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
</UL>

<P><STRONG><a name="[2ce]"></a>fr_rect_filter_tag</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, leveldetectionrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
</UL>

<P><STRONG><a name="[2cf]"></a>fr_rect_coincide_process</STRONG> (Thumb, 240 bytes, Stack size 96 bytes, leveldetectionrect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fr_rect_coincide_process &rArr; met_is_point_in_rect
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_is_point_in_rect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leveldetectionrect.o(.text)
</UL>
<P><STRONG><a name="[2d0]"></a>fr_rect_size_revise</STRONG> (Thumb, 740 bytes, Stack size 200 bytes, leveldetectionrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_take_only_img_data
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_incremental_bound_detection
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_distance_between_two_points
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc_is_null
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_free
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_rotation180
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
</UL>

<P><STRONG><a name="[24d]"></a>fr_bulid_up_rect</STRONG> (Thumb, 818 bytes, Stack size 152 bytes, leveldetectionrect.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc_is_null
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_malloc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;d_batch_free
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_size_revise
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_filter_tag
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_process_coincide
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_delete_contain_rect
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_group
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_from_line
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_srch_rect
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_vertical_detect_rect
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_level_detect_rect
</UL>

<P><STRONG><a name="[2d2]"></a>met_distance_from_point_line</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, method.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>

<P><STRONG><a name="[2b3]"></a>met_positional_relationship</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, method.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_is_point_include_in_rect
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_vertical_extend_line
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_level_extend_line
</UL>

<P><STRONG><a name="[24c]"></a>met_is_point_include_in_rect</STRONG> (Thumb, 324 bytes, Stack size 28 bytes, method.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_positional_relationship
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_srch_rect
</UL>

<P><STRONG><a name="[245]"></a>met_take_only_img_data</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = met_take_only_img_data
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_redress
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_process_rect
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_size_revise
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_filter_rect
</UL>

<P><STRONG><a name="[2b1]"></a>met_ver_decreasing_board</STRONG> (Thumb, 162 bytes, Stack size 36 bytes, method.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_vertical_connect_line
</UL>

<P><STRONG><a name="[247]"></a>met_incremental_bound_detection</STRONG> (Thumb, 144 bytes, Stack size 36 bytes, method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = met_incremental_bound_detection
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_redress
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_process_rect
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_size_revise
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
</UL>

<P><STRONG><a name="[246]"></a>met_decreasing_bound_detection</STRONG> (Thumb, 130 bytes, Stack size 36 bytes, method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = met_decreasing_bound_detection
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_redress
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_process_rect
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_filter_rect
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_level_connect_line
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_filter_line
</UL>

<P><STRONG><a name="[2c5]"></a>met_is_point_in_rect</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = met_is_point_in_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_horizontal_placement_rect
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_coincide_process
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_whole2
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_whole1
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_is_rect_contain_with_other
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_group
</UL>

<P><STRONG><a name="[25d]"></a>met_count_point</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = met_count_point &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_redress
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_horizontal_placement_rect
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_size_revise
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_group
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_expend
</UL>

<P><STRONG><a name="[2d3]"></a>met_get_angle</STRONG> (Thumb, 274 bytes, Stack size 72 bytes, method.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[2d5]"></a>met_point_around_point</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, method.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[25e]"></a>met_point_angle_get_line</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = met_point_angle_get_line &rArr; __hardfp_tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_redress
</UL>

<P><STRONG><a name="[2d6]"></a>met_count_cosinr</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, method.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[24b]"></a>met_count_distance_between_two_points</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = met_count_distance_between_two_points &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_redress
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_facture_merge
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_srch_rect
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_horizontal_placement_rect
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_size_revise
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_group
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_expend
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_vertical_extend_line
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_level_extend_line
</UL>

<P><STRONG><a name="[2d7]"></a>met_line_equation_matrix</STRONG> (Thumb, 290 bytes, Stack size 80 bytes, method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = met_line_equation_matrix &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_line_parameter
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_line_coordinate
</UL>

<P><STRONG><a name="[2d8]"></a>met_get_line_parameters</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = met_get_line_parameters &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_line_parameter
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_line_coordinate
</UL>

<P><STRONG><a name="[2c8]"></a>met_get_line_coordinate</STRONG> (Thumb, 136 bytes, Stack size 120 bytes, method.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_line_parameters
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_line_equation_matrix
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
</UL>

<P><STRONG><a name="[25b]"></a>met_count_point_of_intersection</STRONG> (Thumb, 570 bytes, Stack size 72 bytes, method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = met_count_point_of_intersection &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_redress
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_facture_merge
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
</UL>

<P><STRONG><a name="[2d9]"></a>met_count_line_parameter</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = met_count_line_parameter &rArr; met_line_equation_matrix &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_line_parameters
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_line_equation_matrix
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_line_coordinate
</UL>

<P><STRONG><a name="[25a]"></a>met_count_line_coordinate</STRONG> (Thumb, 146 bytes, Stack size 128 bytes, method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = met_count_line_coordinate &rArr; met_count_line_parameter &rArr; met_line_equation_matrix &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_line_parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_redress
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_facture_merge
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
</UL>

<P><STRONG><a name="[2da]"></a>met_line_clipping</STRONG> (Thumb, 520 bytes, Stack size 56 bytes, method.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_horizontal_placement_rect
</UL>

<P><STRONG><a name="[2c9]"></a>met_horizontal_placement_rect</STRONG> (Thumb, 584 bytes, Stack size 120 bytes, method.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_distance_between_two_points
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_line_clipping
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_is_point_in_rect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
</UL>

<P><STRONG><a name="[2cc]"></a>met_two_lines_instersect</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, method.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_whole2
</UL>

<P><STRONG><a name="[2c0]"></a>met_anticlockwise_rotation90</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, method.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_expend
</UL>

<P><STRONG><a name="[2c1]"></a>met_clockwise_rotation45</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, method.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_expend
</UL>

<P><STRONG><a name="[2d1]"></a>met_rotation180</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, method.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_size_revise
</UL>

<P><STRONG><a name="[46b]"></a>met_line_data</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, method.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>d_batch_malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = d_batch_malloc &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_redress
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_process_rect
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_size_revise
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_process_coincide
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_delete_contain_rect
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_group
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_from_line
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_filter_rect
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_divide_line
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_vertical_connect_line
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_level_connect_line
</UL>

<P><STRONG><a name="[243]"></a>d_batch_malloc_is_null</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, method.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_redress
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_process_rect
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_size_revise
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_process_coincide
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_delete_contain_rect
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_group
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_from_line
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_filter_rect
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_divide_line
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_vertical_connect_line
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_level_connect_line
</UL>

<P><STRONG><a name="[244]"></a>d_batch_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, method.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = d_batch_free &rArr; dfree
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_redress
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_process_rect
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_size_revise
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_process_coincide
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_delete_contain_rect
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_group
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_from_line
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_filter_rect
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_divide_line
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_vertical_connect_line
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_level_connect_line
</UL>

<P><STRONG><a name="[356]"></a>OneDGetTwoPointSmoothGrayInImage</STRONG> (Thumb, 582 bytes, Stack size 72 bytes, onedrectdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OneDGetTwoPointSmoothGrayInImage
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSetSingleLineInfo
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
</UL>

<P><STRONG><a name="[2db]"></a>GetLineHistThr</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, onedrectdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GetLineHistThr &rArr; OustGetHistThreshold &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OustGetHistThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDEdgeEnhancedFilter2
</UL>

<P><STRONG><a name="[269]"></a>OneDRectDecode</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, onedrectdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = OneDRectDecode &rArr; OneDRectGropDecode &rArr; OneDRectLineMerge &rArr; OneDLine2Edge &rArr; OneDEdgeEnhancedFilter2 &rArr; GetLineHistThr &rArr; OustGetHistThreshold &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDDecodePrepro
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGropDecode
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGeneralDecode
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectProcess
</UL>

<P><STRONG><a name="[46c]"></a>GetEANUPCStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, decodeupcean.o(.text), UNUSED)

<P><STRONG><a name="[46d]"></a>GetEAN8Status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, decodeupcean.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>EAN13DecodeReset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, decodeupcean.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EAN13DecodeReset
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAN13AndUPCADecode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oneddecodemain.o(.data)
</UL>
<P><STRONG><a name="[2df]"></a>SearchEAN13OrEAN8StEd</STRONG> (Thumb, 680 bytes, Stack size 64 bytes, decodeupcean.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SearchEAN13OrEAN8StEd
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchEAN13StEd
</UL>

<P><STRONG><a name="[2]"></a>SearchEAN13StEd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, decodeupcean.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SearchEAN13StEd &rArr; SearchEAN13OrEAN8StEd
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchEAN13OrEAN8StEd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oneddecodemain.o(.data)
</UL>
<P><STRONG><a name="[2e0]"></a>_EANUPCCalcCode</STRONG> (Thumb, 540 bytes, Stack size 128 bytes, decodeupcean.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = _EANUPCCalcCode &rArr; VarietyWCalCMinErr &rArr; VarietyWCalcError &rArr; VarietyWidthCR
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCodePostion
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarietyWCalCMinErr
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarietyWInitNewNode
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarietyWCodeInit2Node
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EANUPCDecodeAddOn
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EANUPCContinueDecode
</UL>

<P><STRONG><a name="[2e1]"></a>_EANUPCContinueDecode</STRONG> (Thumb, 396 bytes, Stack size 216 bytes, decodeupcean.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = _EANUPCContinueDecode &rArr; _EANUPCCalcCode &rArr; VarietyWCalCMinErr &rArr; VarietyWCalcError &rArr; VarietyWidthCR
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNodeVariety
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EANUPCCalcCode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EAN13Decode
</UL>

<P><STRONG><a name="[2e3]"></a>_EAN13Decode</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, decodeupcean.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = _EAN13Decode &rArr; _EANUPCContinueDecode &rArr; _EANUPCCalcCode &rArr; VarietyWCalCMinErr &rArr; VarietyWCalcError &rArr; VarietyWidthCR
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCodePostion
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EANUPCContinueDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAN13AndUPCADecode
</UL>

<P><STRONG><a name="[2e5]"></a>_EANUPCIsCorrect</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, decodeupcean.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _EANUPCIsCorrect
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EANUPCIsAddOnSym
</UL>

<P><STRONG><a name="[2e4]"></a>EANUPCIsAddOnSym</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, decodeupcean.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EANUPCIsAddOnSym &rArr; _EANUPCIsCorrect
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EANUPCIsCorrect
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EANUPCAddonDecode
</UL>

<P><STRONG><a name="[2e6]"></a>_EANUPCDecodeAddOn</STRONG> (Thumb, 400 bytes, Stack size 216 bytes, decodeupcean.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = _EANUPCDecodeAddOn &rArr; _EANUPCCalcCode &rArr; VarietyWCalCMinErr &rArr; VarietyWCalcError &rArr; VarietyWidthCR
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNodeVariety
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EANUPCCalcCode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeUPCEANAddOn
</UL>

<P><STRONG><a name="[2e7]"></a>_DecodeUPCEANAddOn</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, decodeupcean.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = _DecodeUPCEANAddOn &rArr; _EANUPCDecodeAddOn &rArr; _EANUPCCalcCode &rArr; VarietyWCalCMinErr &rArr; VarietyWCalcError &rArr; VarietyWidthCR
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EANUPCDecodeAddOn
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EANUPCAddonDecode
</UL>

<P><STRONG><a name="[2e9]"></a>EANUPCSearchAddOn</STRONG> (Thumb, 548 bytes, Stack size 52 bytes, decodeupcean.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EANUPCSearchAddOn
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EANUPCAddonDecode
</UL>

<P><STRONG><a name="[2e8]"></a>EANUPCAddonDecode</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, decodeupcean.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = EANUPCAddonDecode &rArr; _DecodeUPCEANAddOn &rArr; _EANUPCDecodeAddOn &rArr; _EANUPCCalcCode &rArr; VarietyWCalCMinErr &rArr; VarietyWCalcError &rArr; VarietyWidthCR
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EANUPCSearchAddOn
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DecodeUPCEANAddOn
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EANUPCIsAddOnSym
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAN13AndUPCADecode
</UL>

<P><STRONG><a name="[3]"></a>EAN13AndUPCADecode</STRONG> (Thumb, 576 bytes, Stack size 72 bytes, decodeupcean.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = EAN13AndUPCADecode &rArr; EANUPCAddonDecode &rArr; _DecodeUPCEANAddOn &rArr; _EANUPCDecodeAddOn &rArr; _EANUPCCalcCode &rArr; VarietyWCalCMinErr &rArr; VarietyWCalcError &rArr; VarietyWidthCR
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAN13DecodeReset
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodesCompare
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EANUPCAddonDecode
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EAN13Decode
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oneddecodemain.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>EAN13CheckDispose</STRONG> (Thumb, 616 bytes, Stack size 32 bytes, decodeupcean.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EAN13CheckDispose
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oneddecodemain.o(.data)
</UL>
<P><STRONG><a name="[27c]"></a>FindPatternSearch</STRONG> (Thumb, 3412 bytes, Stack size 280 bytes, findpatternsearch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = FindPatternSearch &rArr; PatternCompensation &rArr; PatternPoint2 &rArr; KFromFinderPattern &rArr;  KFromFinderPattern (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRBackRunRegionLabel
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternSort
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternCompensation
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiQR
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlignmentPattern
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTimes
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrFindPosition
</UL>

<P><STRONG><a name="[27d]"></a>FindPatternSearch2</STRONG> (Thumb, 1512 bytes, Stack size 160 bytes, findpatternsearch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = FindPatternSearch2 &rArr; CheckAlignmentPattern &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlignmentPattern
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrFindPosition
</UL>

<P><STRONG><a name="[279]"></a>QRMissingCornerDecode</STRONG> (Thumb, 680 bytes, Stack size 168 bytes, qrmissingcornerdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2264<LI>Call Chain = QRMissingCornerDecode &rArr; QRDecodeV1 &rArr; PerspectiveTransForm &rArr; CalcPerspectiveTransFormationMatrix &rArr; MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrDataDecode
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDecodeV1
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerspectiveTransForm
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDecode
</UL>

<P><STRONG><a name="[2f0]"></a>DeterminePixelNoise4</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, correctpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DeterminePixelNoise4
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlignmentPattern
</UL>

<P><STRONG><a name="[2f1]"></a>DeterminePixelNoise8</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, correctpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DeterminePixelNoise8
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlignmentPattern
</UL>

<P><STRONG><a name="[2eb]"></a>CheckAlignmentPattern</STRONG> (Thumb, 1920 bytes, Stack size 232 bytes, correctpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CheckAlignmentPattern &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeterminePixelNoise8
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeterminePixelNoise4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPatternSearch2
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPatternSearch
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorrectPattern
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignRUNIndex
</UL>

<P><STRONG><a name="[286]"></a>CorrectPattern</STRONG> (Thumb, 1234 bytes, Stack size 288 bytes, correctpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = CorrectPattern &rArr; CheckAlignmentPattern &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlignmentPattern
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrPositionCalc
</UL>

<P><STRONG><a name="[2f3]"></a>QRCrossPoint</STRONG> (Thumb, 446 bytes, Stack size 136 bytes, p4compensation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = QRCrossPoint &rArr; PFromKB &rArr; QRGetPointFromCenter &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PFromKB
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKB
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P4Compensation
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternCompensation
</UL>

<P><STRONG><a name="[27f]"></a>P4Compensation</STRONG> (Thumb, 432 bytes, Stack size 128 bytes, p4compensation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = P4Compensation &rArr; QRCrossPoint &rArr; PFromKB &rArr; QRGetPointFromCenter &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRCrossPoint
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrPositionCalc
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiQR
</UL>

<P><STRONG><a name="[280]"></a>FindFourthPoint</STRONG> (Thumb, 1674 bytes, Stack size 80 bytes, p4compensation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FindFourthPoint &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrPositionCalc
</UL>

<P><STRONG><a name="[2f6]"></a>CalcAlignInterPoint</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, qrfindalignmentpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CalcAlignInterPoint &rArr; GetLineCrossPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineCrossPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAllAlignInterPoint
</UL>

<P><STRONG><a name="[2f8]"></a>CalcAlignAvgPoint</STRONG> (Thumb, 320 bytes, Stack size 56 bytes, qrfindalignmentpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CalcAlignAvgPoint &rArr; CalcPointNScaleInLine
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPointNScaleInLine
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAllAlignInterPoint
</UL>

<P><STRONG><a name="[2fa]"></a>CalcAllAlignInterPoint</STRONG> (Thumb, 924 bytes, Stack size 96 bytes, qrfindalignmentpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = CalcAllAlignInterPoint &rArr; CalcPerspectiveMatrix &rArr; OLSCalcPerspectiverParam &rArr; MatrixInverseF &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiverXY
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiveMatrix
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLSCalcPerspectiverMatrix
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get8byteAlignAddr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAlignAvgPoint
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAlignInterPoint
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern
</UL>

<P><STRONG><a name="[287]"></a>QRFindAlignmentPattern</STRONG> (Thumb, 1016 bytes, Stack size 64 bytes, qrfindalignmentpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = QRFindAlignmentPattern &rArr; CalcAllAlignInterPoint &rArr; CalcPerspectiveMatrix &rArr; OLSCalcPerspectiverParam &rArr; MatrixInverseF &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAllAlignInterPoint
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAlignInterPoint
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignRUNIndex
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPointNScaleInLine
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrPositionCalc
</UL>

<P><STRONG><a name="[285]"></a>QRFindAlignmentPattern2</STRONG> (Thumb, 1360 bytes, Stack size 112 bytes, qrfindalignmentpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = QRFindAlignmentPattern2 &rArr; CalcPerspectiveMatrix &rArr; OLSCalcPerspectiverParam &rArr; MatrixInverseF &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiverXY
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiveMatrix
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLSCalcPerspectiverMatrix
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get8byteAlignAddr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignRUNIndex
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrPositionCalc
</UL>

<P><STRONG><a name="[2fb]"></a>GetPttnGrayThreshold</STRONG> (Thumb, 502 bytes, Stack size 120 bytes, qrfindcorner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = GetPttnGrayThreshold &rArr; GetTwoPointGrayInImage
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTwoPointGrayInImage
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcIntPointNScaleInLine
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
</UL>

<P><STRONG><a name="[27e]"></a>QRFindCorner</STRONG> (Thumb, 1768 bytes, Stack size 688 bytes, qrfindcorner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 940<LI>Call Chain = QRFindCorner &rArr; ExtractFindPatternCorners &rArr; FindCornerPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineEdge
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTwoPointGrayInImage
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross2
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2PointVerticalP
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTwoPointExtedP
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMCalcKB2
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMCalcParamYKXB
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractFindPatternCorners
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPttnGrayThreshold
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcIntPointNScaleInLine
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrPositionCalc
</UL>

<P><STRONG><a name="[2fe]"></a>QRLowPixInterp2</STRONG> (Thumb, 1596 bytes, Stack size 88 bytes, qrlowpixprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = QRLowPixInterp2 &rArr; ImgInterp2
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImgInterp2
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRLowPixProcess
</UL>

<P><STRONG><a name="[281]"></a>QRLowPixProcess</STRONG> (Thumb, 392 bytes, Stack size 88 bytes, qrlowpixprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = QRLowPixProcess &rArr; LineCompensation &rArr; X2Y2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary3
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCompensation
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCircleInImage
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRLowPixInterp2
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrPositionCalc
</UL>

<P><STRONG><a name="[46e]"></a>QRLowPixBinary</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, qrlowpixprocess.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>CutBinaryImage</STRONG> (Thumb, 128 bytes, Stack size 36 bytes, qrlowpixprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CutBinaryImage
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRNoLowPixBinary
</UL>

<P><STRONG><a name="[303]"></a>RestoreCutBinaryImage</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, qrlowpixprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RestoreCutBinaryImage
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRNoLowPixBinary
</UL>

<P><STRONG><a name="[282]"></a>QRNoLowPixBinary</STRONG> (Thumb, 738 bytes, Stack size 128 bytes, qrlowpixprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = QRNoLowPixBinary &rArr; LineCompensation &rArr; X2Y2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imagbinary
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCompensation
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCircleInImage
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreCutBinaryImage
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CutBinaryImage
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrPositionCalc
</UL>

<P><STRONG><a name="[284]"></a>VerisonCalc</STRONG> (Thumb, 4040 bytes, Stack size 496 bytes, verisoncalc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = VerisonCalc &rArr; BCH18_6Correct
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;edge_check
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCH18_6Correct
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrPositionCalc
</UL>

<P><STRONG><a name="[307]"></a>VersionCalcFromPoint</STRONG> (Thumb, 682 bytes, Stack size 80 bytes, verisoncalc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = VersionCalcFromPoint &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBinaryLineData
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerisonCalcNew
</UL>

<P><STRONG><a name="[308]"></a>GetSevenPoint</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, verisoncalc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GetSevenPoint &rArr; QRGetPointFromCenter &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetPointFromCenter
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersion
</UL>

<P><STRONG><a name="[30a]"></a>QRGetVersionData</STRONG> (Thumb, 692 bytes, Stack size 88 bytes, verisoncalc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = QRGetVersionData &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBinaryLineData
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersion
</UL>

<P><STRONG><a name="[30b]"></a>QRGetVersion</STRONG> (Thumb, 682 bytes, Stack size 232 bytes, verisoncalc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = QRGetVersion &rArr; GetSevenPoint &rArr; QRGetPointFromCenter &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetPointFromCenter
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersionData
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSevenPoint
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCH18_6Correct
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerisonCalcNew
</UL>

<P><STRONG><a name="[30c]"></a>QRGetVersion2</STRONG> (Thumb, 876 bytes, Stack size 256 bytes, verisoncalc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = QRGetVersion2 &rArr; CalcPerspectiveMatrix &rArr; OLSCalcPerspectiverParam &rArr; MatrixInverseF &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiverXY
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiveMatrix
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLSCalcPerspectiverMatrix
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get8byteAlignAddr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImBilinear
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCH18_6Correct
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerisonCalcNew
</UL>

<P><STRONG><a name="[283]"></a>VerisonCalcNew</STRONG> (Thumb, 2806 bytes, Stack size 280 bytes, verisoncalc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832<LI>Call Chain = VerisonCalcNew &rArr; QRGetVersion2 &rArr; CalcPerspectiveMatrix &rArr; OLSCalcPerspectiverParam &rArr; MatrixInverseF &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fCalc2LineIntersect
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetPointFromCenter
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersion2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersion
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VersionCalcFromPoint
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrPositionCalc
</UL>

<P><STRONG><a name="[27a]"></a>CurveQRProcess</STRONG> (Thumb, 624 bytes, Stack size 80 bytes, curveqrprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140<LI>Call Chain = CurveQRProcess &rArr; CalcInvRectCobCoeffs &rArr; LeastSquares &rArr; Mldivide &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InverCobRecQRImage
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFPCouplePts
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcInvRectCobCoeffs
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractFindPatternCorners
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDecode
</UL>

<P><STRONG><a name="[312]"></a>QRDataSingleDecode</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, qrdatadecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = QRDataSingleDecode &rArr; RsDecode1 &rArr; rs_correct &rArr; rs_find_roots &rArr; rs_quartic_solve &rArr;  rs_quartic_solve (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsDecode1
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskRomove
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatInfo
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAnalysis
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitValidMark
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrDataDecode
</UL>

<P><STRONG><a name="[277]"></a>QrDataDecode</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, qrdatadecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496<LI>Call Chain = QrDataDecode &rArr; QRDataSingleDecode &rArr; RsDecode1 &rArr; rs_correct &rArr; rs_find_roots &rArr; rs_quartic_solve &rArr;  rs_quartic_solve (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDataSingleDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRMissingCornerDecode
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDecodeV1
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDecode
</UL>

<P><STRONG><a name="[278]"></a>QRDecodeV1</STRONG> (Thumb, 158 bytes, Stack size 112 bytes, qrdatadecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096<LI>Call Chain = QRDecodeV1 &rArr; PerspectiveTransForm &rArr; CalcPerspectiveTransFormationMatrix &rArr; MatrixInverse &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrDataDecode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PerspectiveTransForm
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRMissingCornerDecode
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDecode
</UL>

<P><STRONG><a name="[28c]"></a>PDF417Judge</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, pdf417judge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = PDF417Judge &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBinaryLineData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPDF417SE
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417BinaryGetData
</UL>

<P><STRONG><a name="[28b]"></a>PDF417Judge1</STRONG> (Thumb, 284 bytes, Stack size 80 bytes, pdf417judge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = PDF417Judge1 &rArr; GetLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineData
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPDF417SE
</UL>

<P><STRONG><a name="[28e]"></a>PDF417GetData</STRONG> (Thumb, 1490 bytes, Stack size 232 bytes, pdf417getdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = PDF417GetData &rArr; interp &rArr; dcalloc &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineData
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Decode
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveWindow
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mean
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXy
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRSymbol
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKb
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Scanner
</UL>

<P><STRONG><a name="[31f]"></a>PDF417BinaryGetData</STRONG> (Thumb, 1134 bytes, Stack size 136 bytes, pdf417getdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Judge
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417BinaryDecode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[28d]"></a>PDF417GetRow1</STRONG> (Thumb, 1374 bytes, Stack size 200 bytes, pdf417getrow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = PDF417GetRow1 &rArr; interp &rArr; dcalloc &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineData
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveWindow
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mean
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetXy
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRSymbol
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKb
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Scanner
</UL>

<P><STRONG><a name="[290]"></a>PDF417Analysis</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, pdf417analysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = PDF417Analysis &rArr; DecodeSegment &rArr; ConvertNum
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Scanner
</UL>

<P><STRONG><a name="[28f]"></a>eras_dec_rs1</STRONG> (Thumb, 1576 bytes, Stack size 88 bytes, pdf417rs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = eras_dec_rs1 &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Scanner
</UL>

<P><STRONG><a name="[293]"></a>DMDetector</STRONG> (Thumb, 2088 bytes, Stack size 344 bytes, dmdetector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = DMDetector &rArr; LineMean &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromBounding
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineMean
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TpMove
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisMin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDMAlignmentPatterns
</UL>

<P><STRONG><a name="[32a]"></a>LineMean</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, getduraimprecise.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = LineMean &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBinaryLineData
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMatrixCheck
</UL>

<P><STRONG><a name="[32b]"></a>DataMatrixCheck</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, getduraimprecise.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = DataMatrixCheck &rArr; SelectPFromD &rArr; X2Y2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectPFromD
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineMean
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDuraImprecise
</UL>

<P><STRONG><a name="[294]"></a>GetDuraImprecise</STRONG> (Thumb, 1164 bytes, Stack size 160 bytes, getduraimprecise.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = GetDuraImprecise &rArr; DMCenterPoint &rArr; SelectPFromD &rArr; X2Y2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTwoEdgeFromOnePoint
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMCenterPoint
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMatrixCheck
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDMAlignmentPatterns
</UL>

<P><STRONG><a name="[29c]"></a>DMVersionCalc</STRONG> (Thumb, 3140 bytes, Stack size 208 bytes, dmversioncalc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = DMVersionCalc &rArr; DMGetImgLineDis &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMGetImgLineDis
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Median
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLinkLst2
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLinkLst1
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMatrixScanner
</UL>

<P><STRONG><a name="[333]"></a>decodeAsciiSegment</STRONG> (Thumb, 818 bytes, Stack size 56 bytes, dmdataanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = decodeAsciiSegment &rArr; ReadBits
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBits
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMdataAnalysis
</UL>

<P><STRONG><a name="[335]"></a>decodeC40Segment</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, dmdataanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = decodeC40Segment &rArr; ReadBits
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTwoBytes
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBits
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMdataAnalysis
</UL>

<P><STRONG><a name="[337]"></a>decodeTextSegment</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, dmdataanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = decodeTextSegment &rArr; ReadBits
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTwoBytes
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBits
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMdataAnalysis
</UL>

<P><STRONG><a name="[338]"></a>decodeAnsiX12Segment</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, dmdataanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = decodeAnsiX12Segment &rArr; ReadBits
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTwoBytes
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBits
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMdataAnalysis
</UL>

<P><STRONG><a name="[339]"></a>decodeEdifactSegment</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dmdataanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = decodeEdifactSegment &rArr; ReadBits
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBits
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMdataAnalysis
</UL>

<P><STRONG><a name="[33a]"></a>decodeBase256Segment</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dmdataanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = decodeBase256Segment &rArr; ReadBits
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unrandomize255State
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBits
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMdataAnalysis
</UL>

<P><STRONG><a name="[29b]"></a>DMdataAnalysis</STRONG> (Thumb, 380 bytes, Stack size 80 bytes, dmdataanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DMdataAnalysis &rArr; decodeAsciiSegment &rArr; ReadBits
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeBase256Segment
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeEdifactSegment
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeAnsiX12Segment
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeTextSegment
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeC40Segment
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeAsciiSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMDataProcess
</UL>

<P><STRONG><a name="[299]"></a>DMReadData</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, dmreaddata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = DMReadData &rArr; ECC200 &rArr; utah &rArr; module
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC200
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMDataProcess
</UL>

<P><STRONG><a name="[298]"></a>DMRemoveAlignmentPattern</STRONG> (Thumb, 292 bytes, Stack size 60 bytes, dmreaddata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DMRemoveAlignmentPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMDataProcess
</UL>

<P><STRONG><a name="[349]"></a>dmtxGetBlockDataSize</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dmtxreedsol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsDecode
</UL>

<P><STRONG><a name="[29a]"></a>RsDecode</STRONG> (Thumb, 366 bytes, Stack size 760 bytes, dmtxreedsol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = RsDecode &rArr; RsFindErrorLocatorPoly &rArr; dmtxByteListCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxGetBlockDataSize
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsFindErrorLocations
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsComputeSyndromes
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxByteListPop
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxByteListPush
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxByteListInit
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxByteListBuild
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsRepairErrors
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsFindErrorLocatorPoly
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMDataProcess
</UL>

<P><STRONG><a name="[297]"></a>DmGetDataAndErrSum</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dmtxreedsol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMDataProcess
</UL>

<P><STRONG><a name="[2a3]"></a>GetLineEdge</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, calclineedge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetLineEdge
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExactEdgePoint
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
</UL>

<P><STRONG><a name="[357]"></a>OneDGetAddEdgeWave3</STRONG> (Thumb, 144 bytes, Stack size 36 bytes, calclineedge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OneDGetAddEdgeWave3
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
</UL>

<P><STRONG><a name="[358]"></a>OneDGetSubEdgeWave3</STRONG> (Thumb, 144 bytes, Stack size 36 bytes, calclineedge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OneDGetSubEdgeWave3
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
</UL>

<P><STRONG><a name="[34d]"></a>OneDGetEdgeAreaThr</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, calclineedge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OneDGetEdgeAreaThr &rArr; GetLineMaxMinGrayValue
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineMaxMinGrayValue
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValidSubEdgeWave
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValidAddEdgeWave
</UL>

<P><STRONG><a name="[34f]"></a>GetValidAddEdgeWave</STRONG> (Thumb, 1248 bytes, Stack size 152 bytes, calclineedge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GetValidAddEdgeWave &rArr; OneDGetEdgeAreaThr &rArr; GetLineMaxMinGrayValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDGetEdgeAreaThr
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterLineDecode
</UL>

<P><STRONG><a name="[350]"></a>GetValidSubEdgeWave</STRONG> (Thumb, 1078 bytes, Stack size 160 bytes, calclineedge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GetValidSubEdgeWave &rArr; OneDGetEdgeAreaThr &rArr; GetLineMaxMinGrayValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDGetEdgeAreaThr
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterLineDecode
</UL>

<P><STRONG><a name="[351]"></a>SelectPoint</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, calclineedge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SelectPoint &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint2
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageLineMean
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectPFromD
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PFromKB
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternCompensation
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern
</UL>

<P><STRONG><a name="[31a]"></a>interp</STRONG> (Thumb, 502 bytes, Stack size 328 bytes, interp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = interp &rArr; dcalloc &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetRow1
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetData
</UL>

<P><STRONG><a name="[2ff]"></a>ImgInterp2</STRONG> (Thumb, 1100 bytes, Stack size 76 bytes, interp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ImgInterp2
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRLowPixInterp2
</UL>

<P><STRONG><a name="[353]"></a>InterpIntLineSpline</STRONG> (Thumb, 950 bytes, Stack size 80 bytes, interp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = InterpIntLineSpline &rArr; dcalloc &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTwoPointInterGrayInImage
</UL>

<P><STRONG><a name="[31b]"></a>MoveWindow</STRONG> (Thumb, 694 bytes, Stack size 68 bytes, movewindow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MoveWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetRow1
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetData
</UL>

<P><STRONG><a name="[46f]"></a>MoveWindowf</STRONG> (Thumb, 800 bytes, Stack size 36 bytes, movewindow.o(.text), UNUSED)

<P><STRONG><a name="[470]"></a>MoveWindowFLine2I</STRONG> (Thumb, 384 bytes, Stack size 36 bytes, movewindow.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>GetKb</STRONG> (Thumb, 408 bytes, Stack size 36 bytes, getkb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetKb
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetRow1
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetData
</UL>

<P><STRONG><a name="[354]"></a>GetLineKB</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, getkb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[361]"></a>OneDGetEdge</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, onedrectgeneraldecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OneDGetEdge
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterLineDecode
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
</UL>

<P><STRONG><a name="[35a]"></a>OneDGetTheSameLocationEdge</STRONG> (Thumb, 378 bytes, Stack size 44 bytes, onedrectgeneraldecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OneDGetTheSameLocationEdge
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
</UL>

<P><STRONG><a name="[35b]"></a>OneDBorderMatch</STRONG> (Thumb, 356 bytes, Stack size 44 bytes, onedrectgeneraldecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OneDBorderMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417ScannerStEd
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterLineDecode
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
</UL>

<P><STRONG><a name="[35c]"></a>OneDSearchStEdPosition</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, onedrectgeneraldecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OneDSearchStEdPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterLineDecode
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
</UL>

<P><STRONG><a name="[35d]"></a>OneDNoiseFilter</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, onedrectgeneraldecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OneDNoiseFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterLineDecode
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
</UL>

<P><STRONG><a name="[35e]"></a>OneDBlackNoiseFilter</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, onedrectgeneraldecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OneDBlackNoiseFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterLineDecode
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
</UL>

<P><STRONG><a name="[35f]"></a>OneDDelEdgeEnhan</STRONG> (Thumb, 128 bytes, Stack size 28 bytes, onedrectgeneraldecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OneDDelEdgeEnhan
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
</UL>

<P><STRONG><a name="[360]"></a>OneDEdge2BS</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, onedrectgeneraldecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OneDEdge2BS
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterLineDecode
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
</UL>

<P><STRONG><a name="[355]"></a>OneDLineDecode</STRONG> (Thumb, 1164 bytes, Stack size 192 bytes, onedrectgeneraldecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = OneDLineDecode &rArr; BarCodeDecode &rArr; CODE128Decode &rArr; C128TemplateMatching &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDDecodeMain
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcLinePCS
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417ScannerStEd
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCodeDecode
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDEdge2BS
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDDelEdgeEnhan
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDBlackNoiseFilter
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDNoiseFilter
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSearchStEdPosition
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDBorderMatch
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDGetTheSameLocationEdge
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDGetEdge
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDGetSubEdgeWave3
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDGetAddEdgeWave3
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDGetTwoPointSmoothGrayInImage
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGeneralDecode
</UL>

<P><STRONG><a name="[363]"></a>GetTwoPointInterGrayInImage</STRONG> (Thumb, 346 bytes, Stack size 112 bytes, onedrectgeneraldecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = GetTwoPointInterGrayInImage &rArr; OneDInterpLineDecode128 &rArr; Decode128List2I32 &rArr; iFindC128StartCode &rArr; iDNSrchMaxMin &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTwoPointGrayInImage
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterpLineDecode128
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterpIntLineSpline
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterLineDecode
</UL>

<P><STRONG><a name="[365]"></a>OneDInterLineDecode</STRONG> (Thumb, 966 bytes, Stack size 160 bytes, onedrectgeneraldecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 812<LI>Call Chain = OneDInterLineDecode &rArr; GetTwoPointInterGrayInImage &rArr; OneDInterpLineDecode128 &rArr; Decode128List2I32 &rArr; iFindC128StartCode &rArr; iDNSrchMaxMin &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineMaxMinGrayValue
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDDecodeMain
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCodeDecode
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTwoPointInterGrayInImage
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDEdge2BS
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDBlackNoiseFilter
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDNoiseFilter
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSearchStEdPosition
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDBorderMatch
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDGetEdge
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValidSubEdgeWave
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetValidAddEdgeWave
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGeneralDecode
</UL>

<P><STRONG><a name="[2dd]"></a>OneDRectGeneralDecode</STRONG> (Thumb, 746 bytes, Stack size 56 bytes, onedrectgeneraldecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 868<LI>Call Chain = OneDRectGeneralDecode &rArr; OneDInterLineDecode &rArr; GetTwoPointInterGrayInImage &rArr; OneDInterpLineDecode128 &rArr; Decode128List2I32 &rArr; iFindC128StartCode &rArr; iDNSrchMaxMin &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetDecodeState
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsOneDDecodeIng
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterLineDecode
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcIntPointNScaleInLine
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectDecode
</UL>

<P><STRONG><a name="[36a]"></a>OneDGetLineEdge</STRONG> (Thumb, 220 bytes, Stack size 36 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OneDGetLineEdge
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSetSingleLineInfo
</UL>

<P><STRONG><a name="[369]"></a>OneDSetSingleLineInfo</STRONG> (Thumb, 346 bytes, Stack size 88 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OneDSetSingleLineInfo &rArr; OneDGetTwoPointSmoothGrayInImage
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTwoPointGrayInImage
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustPointInImage
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDGetLineEdge
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDGetTwoPointSmoothGrayInImage
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGetLineInfo
</UL>

<P><STRONG><a name="[372]"></a>OneDSetGrayLineCnt</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OneDSetGrayLineCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGetLineInfo
</UL>

<P><STRONG><a name="[36f]"></a>OneDMinDirt</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OneDMinDirt
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineEdgeMatch
</UL>

<P><STRONG><a name="[36b]"></a>OneDLineOLS</STRONG> (Thumb, 272 bytes, Stack size 80 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OneDLineOLS &rArr; __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineEdgeMatch
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDFilterEdge
</UL>

<P><STRONG><a name="[36d]"></a>OneDFilterEdge</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = OneDFilterEdge &rArr; OneDLineOLS &rArr; __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineOLS
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineEdgeMatch
</UL>

<P><STRONG><a name="[370]"></a>OneDMatchPartCom</STRONG> (Thumb, 154 bytes, Stack size 76 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OneDMatchPartCom
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineEdgeMatch
</UL>

<P><STRONG><a name="[36e]"></a>OneDLineEdgeMatch</STRONG> (Thumb, 710 bytes, Stack size 120 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = OneDLineEdgeMatch &rArr; OneDFilterEdge &rArr; OneDLineOLS &rArr; __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDMatchPartCom
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDFilterEdge
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineOLS
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDMinDirt
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGetLineInfo
</UL>

<P><STRONG><a name="[371]"></a>OneDRectGetLineInfo</STRONG> (Thumb, 406 bytes, Stack size 72 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = OneDRectGetLineInfo &rArr; OneDLineEdgeMatch &rArr; OneDFilterEdge &rArr; OneDLineOLS &rArr; __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineEdgeMatch
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSetGrayLineCnt
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSetSingleLineInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectLineMerge
</UL>

<P><STRONG><a name="[373]"></a>OneDSampleLineMerge</STRONG> (Thumb, 488 bytes, Stack size 56 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OneDSampleLineMerge &rArr; dcalloc &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectLineMerge
</UL>

<P><STRONG><a name="[374]"></a>OneDSampleOddLineMerge</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, onedrectgropdecode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[375]"></a>OneDSampleEveLineMerge</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, onedrectgropdecode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[376]"></a>OneDSampleUpLineMerge</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OneDSampleUpLineMerge &rArr; dcalloc &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectLineMerge
</UL>

<P><STRONG><a name="[377]"></a>OneDSampleDownLineMerge</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OneDSampleDownLineMerge &rArr; dcalloc &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectLineMerge
</UL>

<P><STRONG><a name="[378]"></a>OneDSampleMiddleLineMerge</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, onedrectgropdecode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[37f]"></a>OneDGetSubEdge</STRONG> (Thumb, 280 bytes, Stack size 36 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OneDGetSubEdge
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLine2Edge
</UL>

<P><STRONG><a name="[379]"></a>SegmentBarCodeProcessing</STRONG> (Thumb, 756 bytes, Stack size 152 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SegmentBarCodeProcessing &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLine2Edge
</UL>

<P><STRONG><a name="[37b]"></a>OneDEdgeEnhancedFilter</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OneDEdgeEnhancedFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLine2Edge
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDEdgeEnhancedFilter2
</UL>

<P><STRONG><a name="[37a]"></a>OneDEdgeEnhancedFilter2</STRONG> (Thumb, 440 bytes, Stack size 552 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = OneDEdgeEnhancedFilter2 &rArr; GetLineHistThr &rArr; OustGetHistThreshold &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDEdgeEnhancedFilter
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineHistThr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLine2Edge
</UL>

<P><STRONG><a name="[37d]"></a>GetU16LineMaxMinGrayValue</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetU16LineMaxMinGrayValue
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDU16GetEdgeAreaThr
</UL>

<P><STRONG><a name="[37c]"></a>OneDU16GetEdgeAreaThr</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OneDU16GetEdgeAreaThr &rArr; GetU16LineMaxMinGrayValue
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetU16LineMaxMinGrayValue
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLine2Edge
</UL>

<P><STRONG><a name="[471]"></a>U16DataSmooth</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, onedrectgropdecode.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>OneDLine2Edge</STRONG> (Thumb, 1382 bytes, Stack size 200 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = OneDLine2Edge &rArr; OneDEdgeEnhancedFilter2 &rArr; GetLineHistThr &rArr; OustGetHistThreshold &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDU16GetEdgeAreaThr
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDEdgeEnhancedFilter2
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDEdgeEnhancedFilter
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegmentBarCodeProcessing
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDGetSubEdge
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectLineMerge
</UL>

<P><STRONG><a name="[381]"></a>OneDRectLineMerge</STRONG> (Thumb, 512 bytes, Stack size 88 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = OneDRectLineMerge &rArr; OneDLine2Edge &rArr; OneDEdgeEnhancedFilter2 &rArr; GetLineHistThr &rArr; OustGetHistThreshold &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLine2Edge
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleDownLineMerge
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleUpLineMerge
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleLineMerge
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGetLineInfo
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGropDecode
</UL>

<P><STRONG><a name="[472]"></a>OneDCalcRectCenter</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, onedrectgropdecode.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>OneDGropEdge2BS</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OneDGropEdge2BS
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OneDGropDecode
</UL>

<P><STRONG><a name="[382]"></a>_OneDGropDecode</STRONG> (Thumb, 206 bytes, Stack size 80 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = _OneDGropDecode &rArr; BarCodeDecode &rArr; CODE128Decode &rArr; C128TemplateMatching &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDDecodeMain
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDGropEdge2BS
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCodeDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGropDecode
</UL>

<P><STRONG><a name="[2de]"></a>OneDRectGropDecode</STRONG> (Thumb, 296 bytes, Stack size 112 bytes, onedrectgropdecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = OneDRectGropDecode &rArr; OneDRectLineMerge &rArr; OneDLine2Edge &rArr; OneDEdgeEnhancedFilter2 &rArr; GetLineHistThr &rArr; OustGetHistThreshold &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OneDGropDecode
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectLineMerge
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectDecode
</UL>

<P><STRONG><a name="[386]"></a>EAN13_table</STRONG> (Thumb, 274 bytes, Stack size 36 bytes, ean13_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EAN13_table
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeEANUPCAddOnSymbol
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_EAN8
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeUPCE
</UL>

<P><STRONG><a name="[384]"></a>DecodeEANUPCAddOnSymbol</STRONG> (Thumb, 1822 bytes, Stack size 80 bytes, ean13_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DecodeEANUPCAddOnSymbol &rArr; EAN13_table
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAN13_table
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_EAN8
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeUPCE
</UL>

<P><STRONG><a name="[2ec]"></a>MultiQR</STRONG> (Thumb, 2058 bytes, Stack size 224 bytes, multiqr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = MultiQR &rArr; P4Compensation &rArr; QRCrossPoint &rArr; PFromKB &rArr; QRGetPointFromCenter &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBinaryLineData
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P4Compensation
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLocBaceMulti
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindp
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelPBaseDis
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternSort
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPatternSearch
</UL>

<P><STRONG><a name="[2ef]"></a>PatternSort</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, patternsort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PatternSort &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPatternSearch
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiQR
</UL>

<P><STRONG><a name="[2ed]"></a>ChangeTimes</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, changetimes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ChangeTimes &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBinaryLineData
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPatternSearch
</UL>

<P><STRONG><a name="[301]"></a>LineCompensation</STRONG> (Thumb, 304 bytes, Stack size 96 bytes, linecompensation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LineCompensation &rArr; X2Y2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBinaryImageLine
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRNoLowPixBinary
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRLowPixProcess
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternCompensation
</UL>

<P><STRONG><a name="[300]"></a>DrawCircleInImage</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, patterncompensation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DrawCircleInImage &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRNoLowPixBinary
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRLowPixProcess
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternCompensation
</UL>

<P><STRONG><a name="[2ee]"></a>PatternCompensation</STRONG> (Thumb, 2582 bytes, Stack size 352 bytes, patterncompensation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = PatternCompensation &rArr; PatternPoint2 &rArr; KFromFinderPattern &rArr;  KFromFinderPattern (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint2
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageLineMean
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectPoint
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCompensation
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCircleInImage
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRCrossPoint
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPatternSearch
</UL>

<P><STRONG><a name="[306]"></a>edge_check</STRONG> (Thumb, 694 bytes, Stack size 20 bytes, edge_check.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = edge_check
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerisonCalc
</UL>

<P><STRONG><a name="[38f]"></a>SelectPFromTwoPoint</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, pfromkb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SelectPFromTwoPoint &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern2
</UL>

<P><STRONG><a name="[2f4]"></a>PFromKB</STRONG> (Thumb, 286 bytes, Stack size 80 bytes, pfromkb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = PFromKB &rArr; QRGetPointFromCenter &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectPoint
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetPointFromCenter
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint2
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLocBaceMulti
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRCrossPoint
</UL>

<P><STRONG><a name="[309]"></a>QRGetPointFromCenter</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, qrgetpointfromcenter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = QRGetPointFromCenter &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBinaryLineData
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerisonCalcNew
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint2
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersion
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSevenPoint
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PFromKB
</UL>

<P><STRONG><a name="[2fd]"></a>ExtractFindPatternCorners</STRONG> (Thumb, 1434 bytes, Stack size 152 bytes, extractfindpatterncorners.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = ExtractFindPatternCorners &rArr; FindCornerPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindCornerPoint
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustCodeOrientation
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurveQRProcess
</UL>

<P><STRONG><a name="[30f]"></a>FindFPCouplePts</STRONG> (Thumb, 846 bytes, Stack size 64 bytes, findfpcouplepts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FindFPCouplePts &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurveQRProcess
</UL>

<P><STRONG><a name="[311]"></a>InverCobRecQRImage</STRONG> (Thumb, 962 bytes, Stack size 96 bytes, inversecubicrectifyqrcodeimage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = InverCobRecQRImage &rArr; ImageAverageCalc &rArr; SYSCTRL_AHBPeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageBinaryCalc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageAverageCalc
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApproBilinearInter
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurveQRProcess
</UL>

<P><STRONG><a name="[310]"></a>CalcInvRectCobCoeffs</STRONG> (Thumb, 430 bytes, Stack size 944 bytes, optimizeinverserectifycubiccoeffs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = CalcInvRectCobCoeffs &rArr; LeastSquares &rArr; Mldivide &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixCalc
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeastSquares
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurveQRProcess
</UL>

<P><STRONG><a name="[315]"></a>BitValidMark</STRONG> (Thumb, 722 bytes, Stack size 48 bytes, bitvalidmark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BitValidMark &rArr; dcalloc &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDataSingleDecode
</UL>

<P><STRONG><a name="[317]"></a>DataAnalysis</STRONG> (Thumb, 2392 bytes, Stack size 80 bytes, dataanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DataAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDataSingleDecode
</UL>

<P><STRONG><a name="[313]"></a>FormatInfo</STRONG> (Thumb, 578 bytes, Stack size 56 bytes, formatinfo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FormatInfo &rArr; bch15_5_correct &rArr; bch15_5_calc_epos &rArr; bch15_5_calc_omega
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_correct
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDataSingleDecode
</UL>

<P><STRONG><a name="[398]"></a>QR1_FormatInfo</STRONG> (Thumb, 574 bytes, Stack size 56 bytes, formatinfo.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_correct
</UL>

<P><STRONG><a name="[314]"></a>MaskRomove</STRONG> (Thumb, 212 bytes, Stack size 20 bytes, maskromove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MaskRomove
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDataSingleDecode
</UL>

<P><STRONG><a name="[316]"></a>RsDecode1</STRONG> (Thumb, 630 bytes, Stack size 1152 bytes, rsdecode1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = RsDecode1 &rArr; rs_correct &rArr; rs_find_roots &rArr; rs_quartic_solve &rArr;  rs_quartic_solve (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gf256_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_correct
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDataSingleDecode
</UL>

<P><STRONG><a name="[31d]"></a>GetLRSymbol</STRONG> (Thumb, 1154 bytes, Stack size 72 bytes, getlrsymbol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetLRSymbol &rArr; PDF417FindCode
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417FindCode
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetRow1
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetData
</UL>

<P><STRONG><a name="[319]"></a>GetXy</STRONG> (Thumb, 306 bytes, Stack size 20 bytes, getxy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetXy
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetRow1
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetData
</UL>

<P><STRONG><a name="[31c]"></a>Mean</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, mean.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mean
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetRow1
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetData
</UL>

<P><STRONG><a name="[31e]"></a>PDF417Decode</STRONG> (Thumb, 396 bytes, Stack size 80 bytes, pdf417decode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PDF417Decode &rArr; PDF417FindCode
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417FindCode
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetData
</UL>

<P><STRONG><a name="[320]"></a>PDF417BinaryDecode</STRONG> (Thumb, 448 bytes, Stack size 104 bytes, pdf417decode.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417FindCode
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417BinaryGetData
</UL>

<P><STRONG><a name="[32c]"></a>SelectPFromD</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, dmcenterpoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SelectPFromD &rArr; X2Y2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectPoint
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKB
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMCenterPoint
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMatrixCheck
</UL>

<P><STRONG><a name="[32d]"></a>DMCenterPoint</STRONG> (Thumb, 164 bytes, Stack size 112 bytes, dmcenterpoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = DMCenterPoint &rArr; SelectPFromD &rArr; X2Y2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTwoEdgeFromOnePoint
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectPFromD
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKB
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDuraImprecise
</UL>

<P><STRONG><a name="[39d]"></a>CheckBarCodeRes</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, debarcodeline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CheckBarCodeRes &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterpLineDecode128
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCodeDecode
</UL>

<P><STRONG><a name="[364]"></a>OneDInterpLineDecode128</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, debarcodeline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = OneDInterpLineDecode128 &rArr; Decode128List2I32 &rArr; iFindC128StartCode &rArr; iDNSrchMaxMin &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode128List2I32
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBarCodeRes
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTwoPointInterGrayInImage
</UL>

<P><STRONG><a name="[362]"></a>BarCodeDecode</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, globalhistogrambinarizer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = BarCodeDecode &rArr; CODE128Decode &rArr; C128TemplateMatching &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_EAN8
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_128
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Detect
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeUPCE
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeInterleaved2of5
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode93
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode39
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODE128Decode
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBarCodeRes
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OneDGropDecode
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterLineDecode
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
</UL>

<P><STRONG><a name="[38c]"></a>ImageLineMean</STRONG> (Thumb, 402 bytes, Stack size 120 bytes, imagelinemean.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ImageLineMean &rArr; X2Y2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBinaryLineData
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectPoint
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternCompensation
</UL>

<P><STRONG><a name="[38e]"></a>PatternPoint</STRONG> (Thumb, 1568 bytes, Stack size 320 bytes, qrpatternpoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = PatternPoint &rArr; KFromFinderPattern2 &rArr;  KFromFinderPattern2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectPFromTwoPoint
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetPointFromCenter
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PFromKB
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern2
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternCompensation
</UL>

<P><STRONG><a name="[38d]"></a>PatternPoint2</STRONG> (Thumb, 2226 bytes, Stack size 368 bytes, qrpatternpoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = PatternPoint2 &rArr; KFromFinderPattern &rArr;  KFromFinderPattern (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBinaryLineData
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectPoint
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetPointFromCenter
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PFromKB
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeStandardDeviation
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternCompensation
</UL>

<P><STRONG><a name="[389]"></a>FindLocBaceMulti</STRONG> (Thumb, 418 bytes, Stack size 120 bytes, findlocbacemulti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = FindLocBaceMulti &rArr; PFromKB &rArr; QRGetPointFromCenter &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBinaryLineData
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PFromKB
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindp
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiQR
</UL>

<P><STRONG><a name="[391]"></a>AdjustCodeOrientation</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, adjustcodeorientation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = AdjustCodeOrientation &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractFindPatternCorners
</UL>

<P><STRONG><a name="[392]"></a>FindCornerPoint</STRONG> (Thumb, 676 bytes, Stack size 100 bytes, adjustcodeorientation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = FindCornerPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractFindPatternCorners
</UL>

<P><STRONG><a name="[3ac]"></a>Mldivide</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, mldivide.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Mldivide &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeastSquares
</UL>

<P><STRONG><a name="[3ad]"></a>LeastSquaresCalcXY</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, mldivide.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LeastSquaresCalcXY
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeastSquares
</UL>

<P><STRONG><a name="[3ae]"></a>LeastSquaresAddXY</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, mldivide.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LeastSquaresAddXY
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeastSquares
</UL>

<P><STRONG><a name="[395]"></a>LeastSquares</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, mldivide.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LeastSquares &rArr; Mldivide &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeastSquaresAddXY
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeastSquaresCalcXY
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mldivide
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcInvRectCobCoeffs
</UL>

<P><STRONG><a name="[396]"></a>MatrixCalc</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, mldivide.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MatrixCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcInvRectCobCoeffs
</UL>

<P><STRONG><a name="[3b1]"></a>bch15_5_encode</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, bch15_5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_correct
</UL>

<P><STRONG><a name="[397]"></a>bch15_5_correct</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, bch15_5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bch15_5_correct &rArr; bch15_5_calc_epos &rArr; bch15_5_calc_omega
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_encode
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_calc_epos
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_calc_syndrome
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatInfo
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR1_FormatInfo
</UL>

<P><STRONG><a name="[399]"></a>rs_gf256_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rs_gf256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsDecode1
</UL>

<P><STRONG><a name="[39a]"></a>rs_correct</STRONG> (Thumb, 464 bytes, Stack size 96 bytes, rs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rs_correct &rArr; rs_find_roots &rArr; rs_quartic_solve &rArr;  rs_quartic_solve (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_find_roots
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_hgmul
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gdiv
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_modified_berlekamp_massey
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsDecode1
</UL>

<P><STRONG><a name="[3a1]"></a>PDF417Detect</STRONG> (Thumb, 1406 bytes, Stack size 64 bytes, pdf417detect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PDF417Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCodeDecode
</UL>

<P><STRONG><a name="[3bf]"></a>IsPDF417St9224</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, pdf417detect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsPDF417St9224
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417ScannerStEd
</UL>

<P><STRONG><a name="[3c1]"></a>IsPDF417St4229</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, pdf417detect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IsPDF417St4229
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417ScannerStEd
</UL>

<P><STRONG><a name="[3c0]"></a>IsPDF417Ed8423</STRONG> (Thumb, 260 bytes, Stack size 20 bytes, pdf417detect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IsPDF417Ed8423
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417ScannerStEd
</UL>

<P><STRONG><a name="[3c2]"></a>IsPDF417Ed3248</STRONG> (Thumb, 270 bytes, Stack size 28 bytes, pdf417detect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IsPDF417Ed3248
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417ScannerStEd
</UL>

<P><STRONG><a name="[359]"></a>PDF417ScannerStEd</STRONG> (Thumb, 512 bytes, Stack size 64 bytes, pdf417detect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = PDF417ScannerStEd &rArr; OneDBorderMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDBorderMatch
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPDF417Ed3248
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPDF417Ed8423
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPDF417St4229
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPDF417St9224
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineDecode
</UL>

<P><STRONG><a name="[39b]"></a>PDF417FindCode</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, pdf417findcode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PDF417FindCode
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Decode
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417BinaryDecode
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLRSymbol
</UL>

<P><STRONG><a name="[3c3]"></a>Code39DataProcess</STRONG> (Thumb, 892 bytes, Stack size 96 bytes, decode39.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Code39DataProcess &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode39
</UL>

<P><STRONG><a name="[3a5]"></a>Decode39</STRONG> (Thumb, 2414 bytes, Stack size 288 bytes, decode39.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Decode39 &rArr; Code39DataProcess &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code39DataProcess
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCodeDecode
</UL>

<P><STRONG><a name="[3a6]"></a>Decode93</STRONG> (Thumb, 984 bytes, Stack size 56 bytes, decode93.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Decode93 &rArr; dcalloc &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODE93DataAnalysis
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODE93ValidateCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCodeDecode
</UL>

<P><STRONG><a name="[3cc]"></a>ValidateChecksum</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, decode_128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ValidateChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODE128Decode
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode128List2I32
</UL>

<P><STRONG><a name="[3c7]"></a>Postprocess</STRONG> (Thumb, 534 bytes, Stack size 64 bytes, decode_128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Postprocess &rArr; Postprocess_c
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Postprocess_c
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2decode
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODE128Decode
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode128List2I32
</UL>

<P><STRONG><a name="[3c9]"></a>index2decode</STRONG> (Thumb, 962 bytes, Stack size 72 bytes, decode_128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = index2decode &rArr; Postprocess &rArr; Postprocess_c
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Postprocess
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_128
</UL>

<P><STRONG><a name="[3a2]"></a>decode_128</STRONG> (Thumb, 1706 bytes, Stack size 272 bytes, decode_128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = decode_128 &rArr; index2decode &rArr; Postprocess &rArr; Postprocess_c
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2decode
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCodeDecode
</UL>

<P><STRONG><a name="[3cb]"></a>C128TemplateMatching</STRONG> (Thumb, 956 bytes, Stack size 232 bytes, decode_128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = C128TemplateMatching &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODE128Decode
</UL>

<P><STRONG><a name="[3a3]"></a>CODE128Decode</STRONG> (Thumb, 758 bytes, Stack size 352 bytes, decode_128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = CODE128Decode &rArr; C128TemplateMatching &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C128TemplateMatching
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Postprocess
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateChecksum
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C128StructInit
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCodeDecode
</UL>

<P><STRONG><a name="[3d2]"></a>iC128SingleIndex2Decode</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, decode128new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iC128SingleIndex2Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode128List2I32
</UL>

<P><STRONG><a name="[3d1]"></a>GetIntLineStEdPostion</STRONG> (Thumb, 330 bytes, Stack size 36 bytes, decode128new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetIntLineStEdPostion
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode128List2I32
</UL>

<P><STRONG><a name="[3d0]"></a>iDNSearchWave</STRONG> (Thumb, 146 bytes, Stack size 36 bytes, decode128new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = iDNSearchWave
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFindC128StartCode
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode128List2I32
</UL>

<P><STRONG><a name="[3ce]"></a>iDNSrchMaxMin</STRONG> (Thumb, 334 bytes, Stack size 64 bytes, decode128new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = iDNSrchMaxMin &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFindC128StartCode
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode128List2I32
</UL>

<P><STRONG><a name="[3cf]"></a>iFindC128StartCode</STRONG> (Thumb, 478 bytes, Stack size 56 bytes, decode128new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = iFindC128StartCode &rArr; iDNSrchMaxMin &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDNSrchMaxMin
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDNSearchWave
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode128List2I32
</UL>

<P><STRONG><a name="[3d3]"></a>C128ValidateCheckSum</STRONG> (Thumb, 306 bytes, Stack size 44 bytes, decode128new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = C128ValidateCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode128List2I32
</UL>

<P><STRONG><a name="[3a0]"></a>Decode128List2I32</STRONG> (Thumb, 1638 bytes, Stack size 384 bytes, decode128new.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = Decode128List2I32 &rArr; iFindC128StartCode &rArr; iDNSrchMaxMin &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C128ValidateCheckSum
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iFindC128StartCode
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDNSrchMaxMin
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iDNSearchWave
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIntLineStEdPostion
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iC128SingleIndex2Decode
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Postprocess
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDInterpLineDecode128
</UL>

<P><STRONG><a name="[3d5]"></a>DeInt2of5ResInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, decodeinterleaved2of5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeInterleaved2of5
</UL>

<P><STRONG><a name="[3d8]"></a>DeInt2of5ResReset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, decodeinterleaved2of5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeInterleaved2of5
</UL>

<P><STRONG><a name="[3d7]"></a>DecodeInt2of5Res10</STRONG> (Thumb, 1122 bytes, Stack size 80 bytes, decodeinterleaved2of5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DecodeInt2of5Res10
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeInterleaved2of5
</UL>

<P><STRONG><a name="[3a8]"></a>DecodeInterleaved2of5</STRONG> (Thumb, 1432 bytes, Stack size 56 bytes, decodeinterleaved2of5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DecodeInterleaved2of5 &rArr; DecodeInt2of5Res10
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeInt2of5Res10
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInt2of5ResReset
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInt2of5ResInit
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWidth
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inter2of5DataAnalysis
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInter2of5ResCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCodeDecode
</UL>

<P><STRONG><a name="[3a4]"></a>decode_EAN8</STRONG> (Thumb, 2368 bytes, Stack size 416 bytes, decode_ean8.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = decode_EAN8 &rArr; DecodeEANUPCAddOnSymbol &rArr; EAN13_table
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeEANUPCAddOnSymbol
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAN13_table
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCodeDecode
</UL>

<P><STRONG><a name="[3a7]"></a>DecodeUPCE</STRONG> (Thumb, 2212 bytes, Stack size 136 bytes, decodeupce.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = DecodeUPCE &rArr; DecodeEANUPCAddOnSymbol &rArr; EAN13_table
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeEANUPCAddOnSymbol
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAN13_table
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPCEValidateChecksum
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarCodeDecode
</UL>

<P><STRONG><a name="[3ab]"></a>KFromFinderPattern</STRONG> (Thumb, 952 bytes, Stack size 208 bytes, kfromfinderpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + In Cycle
<LI>Call Chain = KFromFinderPattern &rArr;  KFromFinderPattern (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBinaryLineData
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectPoint
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeStandardDeviation
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint2
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern
</UL>

<P><STRONG><a name="[3aa]"></a>KFromFinderPattern2</STRONG> (Thumb, 996 bytes, Stack size 208 bytes, kfromfinderpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + In Cycle
<LI>Call Chain = KFromFinderPattern2 &rArr;  KFromFinderPattern2 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBinaryLineData
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectPFromTwoPoint
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeStandardDeviation
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern2
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern2
</UL>

<P><STRONG><a name="[3de]"></a>UPCE2EAN13</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, decode_ean13.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UPCE2EAN13
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPCEValidateChecksum
</UL>

<P><STRONG><a name="[3dc]"></a>UPCEValidateChecksum</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, decode_ean13.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UPCEValidateChecksum &rArr; UPCE2EAN13
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UPCE2EAN13
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeUPCE
</UL>

<P><STRONG><a name="[380]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLine2Edge
</UL>

<P><STRONG><a name="[473]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Test
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_1
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_All_Click_menu
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_All_Normal_menu
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_exchange
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_analyser
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VarietyWCalcError
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_max_distance_line
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOldGreyScale
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_iblock_pack
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_extract
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseBerTLVData
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxByteListCopy
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_modified_berlekamp_massey
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleBuffDecodeDemo
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBuffDecodeDemo
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayBand
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCreditCardNumber
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIONum
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMVersionCalc
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetData
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Judge1
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Judge
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417STEDScreen
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPatternSearch2
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPatternSearch
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDecodeV1
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDDecodeMain
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDDecode
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SortRECT
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FiltrateQRDMRect
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RectDelSame
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_facture_merge
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_process_rect
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_srch_rect
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Scanner
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPDF417SE
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inductFindNew
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint2
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectLineMerge
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTwoPointInterGrayInImage
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertText
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternCompensation
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlignmentPattern
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EANUPCDecodeAddOn
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EANUPCContinueDecode
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_horizontal_placement_rect
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_size_revise
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_coincide_process
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_filter_tag
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_process_coincide
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_whole2
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_whole1
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_delete_contain_rect
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_is_rect_contain_with_other
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_angle_match
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_filter_line
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_adiust_rect_direction
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code39DataProcess
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern2
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern
</UL>

<P><STRONG><a name="[1ee]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectProcess
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drealloc
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsDecode1
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_modified_berlekamp_massey
</UL>

<P><STRONG><a name="[1de]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrFindPosition
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDecodeLog
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLine2Edge
</UL>

<P><STRONG><a name="[474]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBuffDecodeDemo
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetData
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRBackRunRegionLabel
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRRunRegionLabel
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxByteListInit
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417BinaryGetData
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_from_line
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[475]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[476]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_atr_analyser
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMReadData
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMDataProcess
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRMissingCornerDecode
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDecodeV1
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurveQRProcess
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAN13DecodeReset
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EAN13AndUPCADecode
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_t1_block_recv
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcalloc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeStart
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleMiddleLineMerge
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleDownLineMerge
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleUpLineMerge
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleEveLineMerge
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleOddLineMerge
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDSampleLineMerge
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromBounding
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataAnalysis
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_process_coincide
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_delete_contain_rect
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_from_line
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_divide_line
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inter2of5DataAnalysis
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2decode
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Postprocess
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODE93DataAnalysis
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code39DataProcess
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_poly_zero
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_EAN8
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeUPCE
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode39
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_exchange
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso7816_device_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeStart
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeConfigInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleBuffDecodeDemo
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBuffDecodeDemo
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Test
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_card_data
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInverse
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiveTransFormationMatrix
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMPerspectiveTransForm
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMDetector
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Judge1
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Judge
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerisonCalcNew
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerisonCalc
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRNoLowPixBinary
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern2
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPatternSearch2
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPatternSearch
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorrectPattern
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrPositionCalc
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRMissingCornerDecode
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Code128Code93CalcCode
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_histogram_angle
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_angle
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rls_clear_memory
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_srch_rect
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInverseF
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLSCalcPerspectiverMatrix
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcLineDel0PCS
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_clear_memory
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRDecode
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectProcess
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPDF417SE
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMatrixScanner
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageScannerStructReset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeCfgInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateOldGreyScale
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_condsel_procedure
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseBerTLVData
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inductFindNew
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDecodeStart
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCTCTestConfigInit
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint2
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageLineMean
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLocBaceMulti
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindp
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDEdgeEnhancedFilter2
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SegmentBarCodeProcessing
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineMean
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417BinaryGetData
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsDecode1
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcInvRectCobCoeffs
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetPointFromCenter
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersion2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersion
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersionData
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VersionCalcFromPoint
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAllAlignInterPoint
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternCompensation
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiQR
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeTimes
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EANUPCDecodeAddOn
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_EANUPCContinueDecode
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGropDecode
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_line_equation_matrix
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_delete_contain_rect
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_divide_line
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_line_group
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern2
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_EAN8
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_128
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeUPCE
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode39
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODE128Decode
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode128List2I32
</UL>

<P><STRONG><a name="[477]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3e0]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[39f]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBarCodeRes
</UL>

<P><STRONG><a name="[193]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_getv
</UL>

<P><STRONG><a name="[39e]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBarCodeRes
</UL>

<P><STRONG><a name="[220]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiverXY
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExactEdgePoint
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFourthPoint
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point_of_intersection
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_histogram_angle
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_redress
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_lrcline
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_point_line_distance
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_angle
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_srch_rect
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OustGetHistThreshold
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross2
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLSCalcPerspectiverParam
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLSCalcPerspectiverMatrix
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMCalcParamYKXB
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineEdgeMatch
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDFilterEdge
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlignmentPattern
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_line_equation_matrix
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_cosinr
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_point_around_point
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_angle
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_distance_from_point_line
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_horizontal_placement_rect
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_size_revise
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_group
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_from_line
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_expend
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_vertical_extend_line
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_level_extend_line
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[222]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiverXY
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFourthPoint
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDAdjustRect4
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_point_angle_get_line
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point_of_intersection
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_histogram_angle
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OustGetHistThreshold
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determainat
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross2
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLSCalcPerspectiverMatrix
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMCalcKB2
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMCalcKB
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarFindLocation
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDFilterEdge
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineKB
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_line_parameters
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_cosinr
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_point_around_point
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_angle
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateTouchScreen
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInverse
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFourthPoint
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point_of_intersection
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInverseF
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross2
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLSCalcPerspectiverMatrix
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[21b]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInverse
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiverXY
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExactEdgePoint
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFourthPoint
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDAdjustRect4
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_point_angle_get_line
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point_of_intersection
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_histogram_angle
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_redress
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_max_distance_line
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_srch_rect
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInverseF
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OustGetHistThreshold
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;determainat
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross2
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLSCalcPerspectiverParam
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLSCalcPerspectiverMatrix
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMCalcKB2
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMCalcKB
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_barcode_rect
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarFindLocation
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineEdgeMatch
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDFilterEdge
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineKB
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_line_parameters
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_cosinr
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_point_around_point
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_angle
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_size_revise
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_group
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_from_line
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_inside_rect
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[219]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInverse
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiverXY
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFourthPoint
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDAdjustRect4
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point_of_intersection
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_point_line_distance
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInverseF
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OustGetHistThreshold
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_intersect
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross2
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMCalcKB2
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMCalcKB
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineOLS
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineKB
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_line_parameters
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_cosinr
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_angle
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_distance_from_point_line
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[235]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDAdjustRect4
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_point_angle_get_line
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_distance_between_two_points
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_histogram_angle
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_redress
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_point_line_distance
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_max_distance_line
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_srch_rect
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OustGetHistThreshold
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_intersect
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_barcode_rect
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineEdgeMatch
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDFilterEdge
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineKB
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlignmentPattern
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_line_equation_matrix
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_cosinr
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_point_around_point
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_angle
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_distance_from_point_line
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_size_revise
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_from_line
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_vertical_extend_line
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_level_extend_line
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[218]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_histogram_angle
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_srch_rect
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OustGetHistThreshold
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_group
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_inside_rect
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[36c]"></a>__aeabi_l2d</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_l2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineOLS
</UL>

<P><STRONG><a name="[21a]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
</UL>

<P><STRONG><a name="[231]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExactEdgePoint
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point_of_intersection
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_redress
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_rect_facture_merge
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_lrcline
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_point_line_distance
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_angle
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_max_distance_line
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_srch_rect
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_barcode_rect
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDLineEdgeMatch
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDFilterEdge
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_point_around_point
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_angle
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_horizontal_placement_rect
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_rect_size_revise
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_from_line
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_expend
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_inside_rect
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_vertical_extend_line
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_level_extend_line
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[255]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_histogram_angle
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_point_line_distance
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_group
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateTouchScreen
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInverse
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiverXY
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExactEdgePoint
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFourthPoint
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_point_angle_get_line
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_lrcline
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_angle
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_srch_rect
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLSCalcPerspectiverMatrix
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMCalcParamYKXB
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarFindLocation
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternCompensation
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlignmentPattern
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_point_around_point
</UL>

<P><STRONG><a name="[263]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[223]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInverse
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiverXY
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFourthPoint
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point_of_intersection
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInverseF
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_intersect
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross2
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMCalcKB2
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMCalcKB
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_line_parameters
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_cosinr
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_angle
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_get_rect_expend
</UL>

<P><STRONG><a name="[224]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInverse
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiverXY
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFourthPoint
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point_of_intersection
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_histogram_angle
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInverseF
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OustGetHistThreshold
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_intersect
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross2
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMCalcKB2
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMCalcKB
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlignmentPattern
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_line_parameters
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_cosinr
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_angle
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_merge_rectangle
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateTouchScreen
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInverse
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPerspectiverXY
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFourthPoint
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_srch_rect
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2LineCross2
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
</UL>

<P><STRONG><a name="[3df]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3e1]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[478]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3e5]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[479]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3e2]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[47a]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[47b]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3e6]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[47c]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[3e4]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[3e3]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>

<P><STRONG><a name="[402]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[47d]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[3e7]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[46]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[47e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[47f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[480]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[3e9]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[481]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[58]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ChangeNs
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_Ns
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_hex
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoubleBuffDecodeDemo
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_RDDIDIF
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Read_GPIO
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_back
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrateTouchScreen
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleBuffDecodeDemo
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_Test
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_org
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Configuration
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_select
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_0
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_Test
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_CreditNum
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_LoopBack
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_2
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_test
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_3
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_4
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_5
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_6
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_menu_7
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
</UL>

<P><STRONG><a name="[3f1]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[3f7]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[390]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractFindPatternCorners
</UL>

<P><STRONG><a name="[3ef]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[2d4]"></a>__hardfp_atan2</STRONG> (Thumb, 448 bytes, Stack size 56 bytes, atan2.o(i.__hardfp_atan2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_get_angle
</UL>

<P><STRONG><a name="[332]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMVersionCalc
</UL>

<P><STRONG><a name="[21c]"></a>__hardfp_atanf</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, atanf.o(i.__hardfp_atanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atanf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDuraImprecise
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMVersionCalc
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417STEDScreen
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageLineMean
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMCenterPoint
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PFromKB
</UL>

<P><STRONG><a name="[24a]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_srch_rect
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_point_around_point
</UL>

<P><STRONG><a name="[23d]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarFindLocation
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustCodeOrientation
</UL>

<P><STRONG><a name="[226]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_point_line_distance
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMCalcKB2
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrossPoint
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_distance_from_point_line
</UL>

<P><STRONG><a name="[254]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_point_line_distance
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_distance_from_point_line
</UL>

<P><STRONG><a name="[249]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bar_srch_rect
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_point_around_point
</UL>

<P><STRONG><a name="[23b]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarFindLocation
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdjustCodeOrientation
</UL>

<P><STRONG><a name="[22f]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFourthPoint
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_point
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_distance_between_two_points
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;X2Y2
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_cosinr
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_distance_from_point_line
</UL>

<P><STRONG><a name="[1f9]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDuraImprecise
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMVersionCalc
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMPerspectiveTransForm
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMDetector
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417GetData
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417STEDScreen
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerisonCalcNew
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerisonCalc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P4Compensation
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPatternSearch2
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPatternSearch
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFourthPoint
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CorrectPattern
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreaRunRegionLabel
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrPositionCalc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurveQRProcess
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SortRECT
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectDecode
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COSineLawA
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calc2PointVerticalP
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTwoPointExtedP
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRBackRunRegionLabel
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRRunRegionLabel
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunRegionLabel
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectProcess
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPDF417SE
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindDMAlignmentPatterns
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMatrixScanner
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarFindLocation
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MhbarImageScanner
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectPFromTwoPoint
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint2
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLocBaceMulti
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelPBaseDis
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectPoint
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMGetImgLineDis
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataMatrixCheck
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromBounding
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisMin
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindFPCouplePts
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcInvRectCobCoeffs
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersion
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersionData
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawCircleInImage
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractFindPatternCorners
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignRUNIndex
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternSort
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternCompensation
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiQR
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeStandardDeviation
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C128TemplateMatching
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern2
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CodeStandardDeviation
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode128List2I32
</UL>

<P><STRONG><a name="[23c]"></a>__hardfp_tan</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, tan.o(i.__hardfp_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = __hardfp_tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_point_angle_get_line
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarFindLocation
</UL>

<P><STRONG><a name="[289]"></a>__hardfp_tanf</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, tanf.o(i.__hardfp_tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMVersionCalc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTwoEdgeFromOnePoint
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417STEDScreen
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRMissingCornerDecode
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindPDF417SE
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint2
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageLineMean
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawBinaryImageLine
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLocBaceMulti
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCompensation
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PFromKB
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRCrossPoint
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKB
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternCompensation
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlignmentPattern
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKB
</UL>

<P><STRONG><a name="[3fb]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[3fd]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[3f4]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[3fc]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[403]"></a>__kernel_tan</STRONG> (Thumb, 764 bytes, Stack size 128 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[3ff]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3f0]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[3f5]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[3fa]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[400]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3f2]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[3ec]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[3f9]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[3ee]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[3f8]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[3fe]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[482]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[483]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[484]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[3ed]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[3f6]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[3f3]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[71]"></a>putc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, putc.o(i.putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = putc &rArr; fputc &rArr; SER_PutChar
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSR_test
</UL>

<P><STRONG><a name="[401]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[3eb]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8c]"></a>NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_NVICConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMI_NVICConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI_NVICConfig
</UL>

<P><STRONG><a name="[c5]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_7_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_6_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_5_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_4_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_3_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_2_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_1_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_0_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>s_toOrd</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, ili9488.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStr90
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayStr
</UL>

<P><STRONG><a name="[107]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, test_emv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_1_start
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_0_IRQHandler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_1_stop
</UL>

<P><STRONG><a name="[127]"></a>DMA_GetPeripheralConfig</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, mhscpu_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MultiBlockInit
</UL>

<P><STRONG><a name="[126]"></a>DMA_GetChannelxBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetRawStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelCmd
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MultiBlockInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSrcBlockReq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetSrcSingleReq
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IsChannelEnabled
</UL>

<P><STRONG><a name="[12e]"></a>GPIO_GetGPIONum</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, mhscpu_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_GetGPIONum &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[138]"></a>SPI_MasterSlaveModeSet</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, mhscpu_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NSM_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
</UL>

<P><STRONG><a name="[144]"></a>LCD_SetInt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mhscpu_lcdi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadBuff
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBuff
</UL>

<P><STRONG><a name="[145]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mhscpu_lcdi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadBuff
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteBuff
</UL>

<P><STRONG><a name="[16a]"></a>SET_ERR</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_xmit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_power_dump
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_warm_reset
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emv_hard_cold_reset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIx_IRQHandler
</UL>

<P><STRONG><a name="[170]"></a>FLUSH_QUEUE</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCIx_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>SCIx_IRQHandler</STRONG> (Thumb, 1076 bytes, Stack size 24 bytes, mhscpu_emv_hard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCIx_IRQHandler &rArr; SET_ERR
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLUSH_QUEUE
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_ERR
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI1_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI0_IRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>delay_20ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mhscpu_msr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_swiping_card
</UL>

<P><STRONG><a name="[17c]"></a>reset_msr_mod</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mhscpu_msr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dpu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_swiping_card
</UL>

<P><STRONG><a name="[17e]"></a>dpu_cal_dc</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, mhscpu_msr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dpu_cal_dc
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dpu
</UL>

<P><STRONG><a name="[188]"></a>get_mask</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mhscpu_msr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dpu_track_raw_data
</UL>

<P><STRONG><a name="[186]"></a>get_stf_raw_bit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mhscpu_msr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_stf_raw_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dpu_track_raw_data
</UL>

<P><STRONG><a name="[185]"></a>get_dpu_track_raw_data</STRONG> (Thumb, 974 bytes, Stack size 208 bytes, mhscpu_msr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = get_dpu_track_raw_data &rArr; msr_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_odd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msr_memcpy
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stf_raw_bit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_card_data
</UL>

<P><STRONG><a name="[1b4]"></a>antiFlicker</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, decodelib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCBWriteReg
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorAEOff
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSensorModel
</UL>

<P><STRONG><a name="[1a9]"></a>GetCodeID</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, decodelib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeStart
</UL>

<P><STRONG><a name="[1d3]"></a>updateOldGreyScale</STRONG> (Thumb, 58 bytes, Stack size 272 bytes, sensormodel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inductFindNew
</UL>

<P><STRONG><a name="[1d4]"></a>getGreyFrmIMG</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, sensormodel.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inductFindNew
</UL>

<P><STRONG><a name="[248]"></a>bar_srch_rect</STRONG> (Thumb, 1468 bytes, Stack size 120 bytes, newdecodelocation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_is_point_include_in_rect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;met_count_distance_between_two_points
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fr_bulid_up_rect
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;barcode_position
</UL>

<P><STRONG><a name="[251]"></a>lrc_get_max_distance_line</STRONG> (Thumb, 1132 bytes, Stack size 88 bytes, newdecodelocation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lrc_get_max_distance_line &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_get_point_distance
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lrc_find_angle_barcode_rect
</UL>

<P><STRONG><a name="[262]"></a>GetCrossPoint</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, onedrectprocess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetCrossPoint &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDAdjustRect4
</UL>

<P><STRONG><a name="[27b]"></a>AreaRunRegionLabel</STRONG> (Thumb, 838 bytes, Stack size 72 bytes, qrfindposition.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = AreaRunRegionLabel &rArr; QRRunRegionLabel &rArr; RLC2LineDataProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRRunRegionLabel
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrPositionCalc
</UL>

<P><STRONG><a name="[2a1]"></a>CalcIntPointNScaleInLine</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, perspectivetransform.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExactEdgePoint
</UL>

<P><STRONG><a name="[2f2]"></a>GetKB</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, p4compensation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetKB &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRCrossPoint
</UL>

<P><STRONG><a name="[2f9]"></a>CalcPointNScaleInLine</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, qrfindalignmentpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalcPointNScaleInLine
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAlignAvgPoint
</UL>

<P><STRONG><a name="[2f5]"></a>QRFindAlignRUNIndex</STRONG> (Thumb, 560 bytes, Stack size 104 bytes, qrfindalignmentpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = QRFindAlignRUNIndex &rArr; CheckAlignmentPattern &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRRunRegionLabel
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckAlignmentPattern
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern2
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindAlignmentPattern
</UL>

<P><STRONG><a name="[2f7]"></a>GetLineCrossPoint</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, qrfindalignmentpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetLineCrossPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcAlignInterPoint
</UL>

<P><STRONG><a name="[2fc]"></a>CalcIntPointNScaleInLine</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, qrfindcorner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalcIntPointNScaleInLine
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRFindCorner
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPttnGrayThreshold
</UL>

<P><STRONG><a name="[304]"></a>BCH18_6Correct</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, verisoncalc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BCH18_6Correct
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qrhammingDist
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerisonCalc
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersion2
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersion
</UL>

<P><STRONG><a name="[30d]"></a>ImBilinear</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, verisoncalc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ImBilinear
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRGetVersion2
</UL>

<P><STRONG><a name="[305]"></a>qrhammingDist</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, verisoncalc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCH18_6Correct
</UL>

<P><STRONG><a name="[324]"></a>ConvertNum</STRONG> (Thumb, 340 bytes, Stack size 228 bytes, pdf417analysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ConvertNum
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSegment
</UL>

<P><STRONG><a name="[323]"></a>ConvertByte</STRONG> (Thumb, 244 bytes, Stack size 44 bytes, pdf417analysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ConvertByte
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSegment
</UL>

<P><STRONG><a name="[321]"></a>ConvertText</STRONG> (Thumb, 298 bytes, Stack size 168 bytes, pdf417analysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ConvertText &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeSegment
</UL>

<P><STRONG><a name="[322]"></a>DecodeSegment</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, pdf417analysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = DecodeSegment &rArr; ConvertNum
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertText
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertByte
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertNum
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDF417Analysis
</UL>

<P><STRONG><a name="[325]"></a>DisMin</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, dmdetector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DisMin &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMDetector
</UL>

<P><STRONG><a name="[329]"></a>TpMove</STRONG> (Thumb, 334 bytes, Stack size 12 bytes, dmdetector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TpMove
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMDetector
</UL>

<P><STRONG><a name="[326]"></a>LineMean</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, dmdetector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = LineMean &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBinaryLineData
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMDetector
</UL>

<P><STRONG><a name="[328]"></a>ImagePoint</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, dmdetector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ImagePoint
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromBounding
</UL>

<P><STRONG><a name="[327]"></a>FromBounding</STRONG> (Thumb, 1410 bytes, Stack size 72 bytes, dmdetector.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FromBounding &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImagePoint
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMDetector
</UL>

<P><STRONG><a name="[32e]"></a>ChangeLinkLst1</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, dmversioncalc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ChangeLinkLst1 &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMVersionCalc
</UL>

<P><STRONG><a name="[32f]"></a>ChangeLinkLst2</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, dmversioncalc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ChangeLinkLst2 &rArr; QrSortfloat &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrSortfloat
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMVersionCalc
</UL>

<P><STRONG><a name="[330]"></a>Median</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, dmversioncalc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Median &rArr; QrSortfloat &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QrSortfloat
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMVersionCalc
</UL>

<P><STRONG><a name="[331]"></a>DMGetImgLineDis</STRONG> (Thumb, 784 bytes, Stack size 64 bytes, dmversioncalc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMGetImgLineDis &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMVersionCalc
</UL>

<P><STRONG><a name="[334]"></a>ReadBits</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dmdataanalysis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadBits
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeBase256Segment
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeEdifactSegment
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeAnsiX12Segment
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeTextSegment
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeC40Segment
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeAsciiSegment
</UL>

<P><STRONG><a name="[336]"></a>parseTwoBytes</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dmdataanalysis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeAnsiX12Segment
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeTextSegment
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeC40Segment
</UL>

<P><STRONG><a name="[33b]"></a>unrandomize255State</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dmdataanalysis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodeBase256Segment
</UL>

<P><STRONG><a name="[33d]"></a>module</STRONG> (Thumb, 96 bytes, Stack size 28 bytes, dmreaddata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = module
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;corner4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;corner3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;corner2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;corner1
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utah
</UL>

<P><STRONG><a name="[33c]"></a>utah</STRONG> (Thumb, 240 bytes, Stack size 80 bytes, dmreaddata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = utah &rArr; module
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC200
</UL>

<P><STRONG><a name="[33e]"></a>ECC200</STRONG> (Thumb, 316 bytes, Stack size 88 bytes, dmreaddata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ECC200 &rArr; utah &rArr; module
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;corner4
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;corner3
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;corner2
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;corner1
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utah
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMReadData
</UL>

<P><STRONG><a name="[33f]"></a>corner1</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, dmreaddata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = corner1 &rArr; module
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC200
</UL>

<P><STRONG><a name="[340]"></a>corner2</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, dmreaddata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = corner2 &rArr; module
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC200
</UL>

<P><STRONG><a name="[341]"></a>corner3</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, dmreaddata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = corner3 &rArr; module
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC200
</UL>

<P><STRONG><a name="[342]"></a>corner4</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, dmreaddata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = corner4 &rArr; module
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECC200
</UL>

<P><STRONG><a name="[343]"></a>dmtxByteListCopy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dmtxreedsol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dmtxByteListCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsFindErrorLocations
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsFindErrorLocatorPoly
</UL>

<P><STRONG><a name="[344]"></a>RsFindErrorLocatorPoly</STRONG> (Thumb, 644 bytes, Stack size 1000 bytes, dmtxreedsol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = RsFindErrorLocatorPoly &rArr; dmtxByteListCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxByteListPush
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxByteListInit
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxByteListBuild
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxByteListCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsDecode
</UL>

<P><STRONG><a name="[348]"></a>RsRepairErrors</STRONG> (Thumb, 326 bytes, Stack size 144 bytes, dmtxreedsol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = RsRepairErrors &rArr; dmtxByteListPush
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxByteListPush
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxByteListBuild
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsDecode
</UL>

<P><STRONG><a name="[345]"></a>dmtxByteListBuild</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dmtxreedsol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsDecode
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsFindErrorLocations
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsRepairErrors
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsFindErrorLocatorPoly
</UL>

<P><STRONG><a name="[346]"></a>dmtxByteListInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dmtxreedsol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dmtxByteListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsDecode
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsFindErrorLocations
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsComputeSyndromes
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsFindErrorLocatorPoly
</UL>

<P><STRONG><a name="[347]"></a>dmtxByteListPush</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, dmtxreedsol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dmtxByteListPush
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsDecode
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsFindErrorLocations
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsRepairErrors
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsFindErrorLocatorPoly
</UL>

<P><STRONG><a name="[34c]"></a>dmtxByteListPop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dmtxreedsol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsDecode
</UL>

<P><STRONG><a name="[34a]"></a>RsComputeSyndromes</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, dmtxreedsol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RsComputeSyndromes &rArr; dmtxByteListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxByteListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsDecode
</UL>

<P><STRONG><a name="[34b]"></a>RsFindErrorLocations</STRONG> (Thumb, 154 bytes, Stack size 104 bytes, dmtxreedsol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RsFindErrorLocations &rArr; dmtxByteListCopy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxByteListPush
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxByteListInit
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxByteListBuild
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmtxByteListCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RsDecode
</UL>

<P><STRONG><a name="[352]"></a>filter</STRONG> (Thumb, 90 bytes, Stack size 28 bytes, interp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = filter
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interp
</UL>

<P><STRONG><a name="[368]"></a>CalcIntPointNScaleInLine</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, onedrectgeneraldecode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalcIntPointNScaleInLine
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneDRectGeneralDecode
</UL>

<P><STRONG><a name="[385]"></a>CheckWidth</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ean13_table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeEANUPCAddOnSymbol
</UL>

<P><STRONG><a name="[387]"></a>SelPBaseDis</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, multiqr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SelPBaseDis &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiQR
</UL>

<P><STRONG><a name="[388]"></a>QRFindp</STRONG> (Thumb, 318 bytes, Stack size 128 bytes, multiqr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = QRFindp &rArr; FindLocBaceMulti &rArr; PFromKB &rArr; QRGetPointFromCenter &rArr; GetBinaryLineData &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindLocBaceMulti
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiQR
</UL>

<P><STRONG><a name="[38a]"></a>DrawBinaryImageLine</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, linecompensation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DrawBinaryImageLine &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineCompensation
</UL>

<P><STRONG><a name="[38b]"></a>GetCrossPoint</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, patterncompensation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetCrossPoint &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternCompensation
</UL>

<P><STRONG><a name="[393]"></a>ApproBilinearInter</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, inversecubicrectifyqrcodeimage.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ApproBilinearInter
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InverCobRecQRImage
</UL>

<P><STRONG><a name="[39c]"></a>GetKB</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, dmcenterpoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GetKB &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelectPFromD
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMCenterPoint
</UL>

<P><STRONG><a name="[3a9]"></a>CodeStandardDeviation</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, qrpatternpoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CodeStandardDeviation &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternPoint2
</UL>

<P><STRONG><a name="[3af]"></a>bch15_5_calc_syndrome</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, bch15_5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bch15_5_calc_syndrome
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_correct
</UL>

<P><STRONG><a name="[3b0]"></a>bch15_5_calc_epos</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, bch15_5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bch15_5_calc_epos &rArr; bch15_5_calc_omega
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_calc_omega
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf16_hmul
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_correct
</UL>

<P><STRONG><a name="[3b3]"></a>gf16_hmul</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bch15_5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_calc_epos
</UL>

<P><STRONG><a name="[3b2]"></a>bch15_5_calc_omega</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bch15_5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bch15_5_calc_omega
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gf16_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_calc_epos
</UL>

<P><STRONG><a name="[3b4]"></a>gf16_mul</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bch15_5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bch15_5_calc_omega
</UL>

<P><STRONG><a name="[3b5]"></a>rs_quadratic_solve</STRONG> (Thumb, 466 bytes, Stack size 48 bytes, rs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rs_quadratic_solve
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gsqrt
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_hgmul
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gdiv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_cubic_solve
</UL>

<P><STRONG><a name="[3ba]"></a>rs_cubic_solve</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, rs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rs_cubic_solve &rArr; rs_quadratic_solve
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gdiv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gmul
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quadratic_solve
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
</UL>

<P><STRONG><a name="[3bb]"></a>rs_quartic_solve</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, rs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = rs_quartic_solve &rArr;  rs_quartic_solve (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gsqrt
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_hgmul
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gdiv
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gmul
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_cubic_solve
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quadratic_solve
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_find_roots
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
</UL>

<P><STRONG><a name="[3bc]"></a>rs_modified_berlekamp_massey</STRONG> (Thumb, 428 bytes, Stack size 72 bytes, rs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = rs_modified_berlekamp_massey &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_poly_zero
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_hgmul
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_gmul
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_correct
</UL>

<P><STRONG><a name="[3b9]"></a>rs_gmul</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_modified_berlekamp_massey
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_cubic_solve
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quadratic_solve
</UL>

<P><STRONG><a name="[3b8]"></a>rs_gdiv</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_cubic_solve
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quadratic_solve
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_correct
</UL>

<P><STRONG><a name="[3b7]"></a>rs_hgmul</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_find_roots
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_modified_berlekamp_massey
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quadratic_solve
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_correct
</UL>

<P><STRONG><a name="[3b6]"></a>rs_gsqrt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quadratic_solve
</UL>

<P><STRONG><a name="[3bd]"></a>rs_poly_zero</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rs.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_modified_berlekamp_massey
</UL>

<P><STRONG><a name="[3be]"></a>rs_find_roots</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, rs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rs_find_roots &rArr; rs_quartic_solve &rArr;  rs_quartic_solve (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_hgmul
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_quartic_solve
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs_correct
</UL>

<P><STRONG><a name="[3c4]"></a>CheckWidth</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, decode39.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode39
</UL>

<P><STRONG><a name="[3c6]"></a>CODE93ValidateCheckSum</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, decode93.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CODE93ValidateCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode93
</UL>

<P><STRONG><a name="[3c5]"></a>CODE93DataAnalysis</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, decode93.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CODE93DataAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Decode93
</UL>

<P><STRONG><a name="[3c8]"></a>Postprocess_c</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, decode_128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Postprocess_c
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Postprocess
</UL>

<P><STRONG><a name="[3ca]"></a>CheckWidth</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, decode_128.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index2decode
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_128
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODE128Decode
</UL>

<P><STRONG><a name="[3cd]"></a>C128StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, decode_128.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CODE128Decode
</UL>

<P><STRONG><a name="[3d9]"></a>DeInter2of5ResCheck</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, decodeinterleaved2of5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DeInter2of5ResCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeInterleaved2of5
</UL>

<P><STRONG><a name="[3d4]"></a>Inter2of5DataAnalysis</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, decodeinterleaved2of5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Inter2of5DataAnalysis
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeInterleaved2of5
</UL>

<P><STRONG><a name="[3d6]"></a>CheckWidth</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, decodeinterleaved2of5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeInterleaved2of5
</UL>

<P><STRONG><a name="[3da]"></a>CheckWidth</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, decode_ean8.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_EAN8
</UL>

<P><STRONG><a name="[3db]"></a>CheckWidth</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, decodeupce.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeUPCE
</UL>

<P><STRONG><a name="[3dd]"></a>CodeStandardDeviation</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, kfromfinderpattern.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CodeStandardDeviation &rArr; dmalloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmalloc
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfree
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern2
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KFromFinderPattern
</UL>

<P><STRONG><a name="[3ea]"></a>_printf_core</STRONG> (Thumb, 984 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[405]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[404]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
